/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { expect, test } from "@jest/globals";

import { SDK } from "../src/sdk";
import { recordTest } from "./common_helpers";

import {
  ApiKeyAuthGlobalNewResponse,
  ApiKeyAuthResponse,
  BasicAuthNewResponse,
  MultipleSimpleOptionsAuthResponse,
  MultipleMixedOptionsAuthResponse,
  MultipleMixedSchemeAuthResponse,
  MultipleOptionsWithMixedSchemesAuthResponse,
  MultipleOptionsWithSimpleSchemesAuthResponse,
  MultipleSimpleSchemeAuthResponse,
  NoAuthResponse,
  Oauth2AuthNewResponse,
  Oauth2OverrideSecurity,
  BearerAuthResponse,
} from "../src/sdk/models/operations";
import * as shared from "../src/sdk/models/shared";

test("Test No Auth", async () => {
  recordTest("auth-no-auth");

  const sdk = new SDK({});

  const res: NoAuthResponse = await sdk.auth.noAuth();

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Basic Auth", async () => {
  recordTest("auth-basic-auth");

  const sdk = new SDK({});

  const res: BasicAuthNewResponse = await sdk.authNew.basicAuthNew(
    {
      basicAuth: {
        username: "testUser",
        password: "testPass",
      },
    },
    {
      username: "testUser",
      password: "testPass",
    },
  );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test API Key Auth Global", async () => {
  recordTest("auth-api-key-auth-global");

  const sdk = new SDK({
    security: {
      apiKeyAuthNew: "test_api_key",
    },
  });

  const res: ApiKeyAuthGlobalNewResponse =
    await sdk.authNew.apiKeyAuthGlobalNew({
      headerAuth: [
        {
          headerName: "x-api-key",
          expectedValue: "test_api_key",
        },
      ],
    });

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test API Key Auth Operation", async () => {
  recordTest("auth-api-key-auth-operation");

  const sdk = new SDK({});

  const res: ApiKeyAuthResponse = await sdk.auth.apiKeyAuth({
    apiKeyAuth: "Bearer test_token",
  });

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
  expect(res.token?.authenticated).toBe(true);
  expect(res.token?.token).toBe("test_token");
});

test("Test Bearer Auth Operation With Prefix", async () => {
  recordTest("auth-bearer-auth-operation-with-prefix");

  const sdk = new SDK({});

  const res: BearerAuthResponse = await sdk.auth.bearerAuth({
    bearerAuth: "Bearer test_token",
  });

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
  expect(res.token?.authenticated).toBe(true);
  expect(res.token?.token).toBe("test_token");
});

test("Test Bearer Auth Operation Without Prefix", async () => {
  recordTest("auth-bearer-auth-operation-without-prefix");

  const sdk = new SDK({});

  const res: BearerAuthResponse = await sdk.auth.bearerAuth({
    bearerAuth: "test_token",
  });

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
  expect(res.token?.authenticated).toBe(true);
  expect(res.token?.token).toBe("test_token");
});

test("Test Oauth2 Auth", async () => {
  recordTest("auth-oauth2-auth");

  const sdk = new SDK({});

  const res: Oauth2AuthNewResponse = await sdk.authNew.oauth2AuthNew(
    {
      headerAuth: [
        {
          headerName: "Authorization",
          expectedValue: "Bearer testToken",
        },
      ],
    },
    {
      oauth2: "Bearer testToken",
    },
  );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test OpenID Connect Auth", async () => {
  recordTest("auth-open-id-connect-auth");

  const sdk = new SDK({});

  const res: ApiKeyAuthGlobalNewResponse =
    await sdk.authNew.openIdConnectAuthNew(
      {
        headerAuth: [
          {
            headerName: "Authorization",
            expectedValue: "Bearer testToken",
          },
        ],
      },
      {
        openIdConnect: "Bearer testToken",
      },
    );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Multiple Simple Scheme Auth", async () => {
  recordTest("auth-multiple-simple-scheme-auth");

  const sdk = new SDK({});

  const res: MultipleSimpleSchemeAuthResponse =
    await sdk.authNew.multipleSimpleSchemeAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
          {
            headerName: "Authorization",
            expectedValue: "Bearer testToken",
          },
        ],
      },
      {
        apiKeyAuthNew: "test_api_key",
        oauth2: "Bearer testToken",
      },
    );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Multiple Mixed Scheme Auth", async () => {
  recordTest("auth-multiple-mixed-scheme-auth");

  const sdk = new SDK({});

  const res: MultipleMixedSchemeAuthResponse =
    await sdk.authNew.multipleMixedSchemeAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
        ],
        basicAuth: {
          username: "testUser",
          password: "testPass",
        },
      },
      {
        apiKeyAuthNew: "test_api_key",
        basicAuth: {
          username: "testUser",
          password: "testPass",
        },
      },
    );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Multiple Simple Options Auth - First Option", async () => {
  recordTest("auth-multiple-simple-options-auth-first-option");

  const sdk = new SDK({});

  const res: MultipleSimpleOptionsAuthResponse =
    await sdk.authNew.multipleSimpleOptionsAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
        ],
      },
      {
        apiKeyAuthNew: "test_api_key",
      },
    );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Multiple Simple Options Auth - Second Option", async () => {
  recordTest("auth-multiple-simple-options-auth-second-option");

  const sdk = new SDK({});

  const res: MultipleSimpleOptionsAuthResponse =
    await sdk.authNew.multipleSimpleOptionsAuth(
      {
        headerAuth: [
          {
            headerName: "Authorization",
            expectedValue: "Bearer testToken",
          },
        ],
      },
      {
        oauth2: "Bearer testToken",
      },
    );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Multiple Mixed Options Auth - First Option", async () => {
  recordTest("auth-multiple-mixed-options-auth-first-option");

  const sdk = new SDK({});

  const res: MultipleMixedOptionsAuthResponse =
    await sdk.authNew.multipleMixedOptionsAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
        ],
      },
      {
        apiKeyAuthNew: "test_api_key",
      },
    );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Multiple Mixed Options Auth - Second Option", async () => {
  recordTest("auth-multiple-mixed-options-auth-second-option");

  const sdk = new SDK({});

  const res: MultipleMixedOptionsAuthResponse =
    await sdk.authNew.multipleMixedOptionsAuth(
      {
        basicAuth: {
          username: "testUser",
          password: "testPass",
        },
      },
      {
        basicAuth: {
          username: "testUser",
          password: "testPass",
        },
      },
    );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Multiple Options with Simple Schemes Auth - First Option", async () => {
  recordTest("auth-multiple-options-with-simple-schemes-auth-first-option");

  const sdk = new SDK({});

  const res: MultipleOptionsWithSimpleSchemesAuthResponse =
    await sdk.authNew.multipleOptionsWithSimpleSchemesAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
          {
            headerName: "Authorization",
            expectedValue: "Bearer testToken",
          },
        ],
      },
      {
        option1: {
          apiKeyAuthNew: "test_api_key",
          oauth2: "Bearer testToken",
        },
      },
    );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Multiple Options with Simple Schemes Auth - Second Option", async () => {
  recordTest("auth-multiple-options-with-simple-schemes-auth-second-option");

  const sdk = new SDK({});

  const res: MultipleOptionsWithSimpleSchemesAuthResponse =
    await sdk.authNew.multipleOptionsWithSimpleSchemesAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
          {
            headerName: "Authorization",
            expectedValue: "Bearer testToken",
          },
        ],
      },
      {
        option2: {
          apiKeyAuthNew: "test_api_key",
          openIdConnect: "Bearer testToken",
        },
      },
    );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Multiple Options with Mixed Schemes Auth - First Option", async () => {
  recordTest("auth-multiple-options-with-mixed-schemes-auth-first-option");

  const sdk = new SDK({});

  const res: MultipleOptionsWithMixedSchemesAuthResponse =
    await sdk.authNew.multipleOptionsWithMixedSchemesAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
          {
            headerName: "Authorization",
            expectedValue: "Bearer testToken",
          },
        ],
      },
      {
        option1: {
          apiKeyAuthNew: "test_api_key",
          oauth2: "Bearer testToken",
        },
      },
    );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Multiple Options with Mixed Schemes Auth - Second Option", async () => {
  recordTest("auth-multiple-options-with-mixed-schemes-auth-second-option");

  const sdk = new SDK({});

  const res: MultipleOptionsWithMixedSchemesAuthResponse =
    await sdk.authNew.multipleOptionsWithMixedSchemesAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
        ],
        basicAuth: {
          username: "testUser",
          password: "testPass",
        },
      },
      {
        option2: {
          apiKeyAuthNew: "test_api_key",
          basicAuth: {
            username: "testUser",
            password: "testPass",
          },
        },
      },
    );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("function callbacks for oAuth support are invoked for global security", async () => {
  recordTest("auth-function-callbacks-oauth-global-security");

  const sdk = new SDK({
    security: async (): Promise<shared.Security> => ({
      oauth2: "Bearer global",
    }),
  });

  const res = await sdk.auth.globalBearerAuth();

  expect(res.statusCode).toBeDefined();
  expect(res.token?.token).toBe("global");
});

test("function callbacks for oAuth support are invoked, with operation level security overrides ", async () => {
  recordTest(
    "auth-function-callbacks-oauth-global-security-with-local-override",
  );

  const sdk = new SDK({
    security: async (): Promise<shared.Security> => ({
      oauth2: "Bearer global",
    }),
  });

  const res = await sdk.auth.oauth2Auth({
    oauth2: "Bearer local",
  });

  expect(res.statusCode).toBeDefined();
  expect(res.token?.token).toBe("local");
});

test("function callbacks for oAuth support are invoked, with param overrides", async () => {
  recordTest(
    "auth-function-callbacks-oauth-global-security-with-param-override",
  );

  const sdk = new SDK({
    security: async (): Promise<shared.Security> => ({
      oauth2: "Bearer global",
    }),
  });

  let res: ApiKeyAuthResponse = await sdk.auth.oauth2Override(
    new Oauth2OverrideSecurity({
      oauth2: "Bearer overrideHeaders",
    }),
  );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200); // asserts local is used
  expect(res.token?.token).toBe("overrideHeaders");

  res = await sdk.auth.oauth2Override(
    new Oauth2OverrideSecurity({
      oauth2: "Bearer overrideHeaders",
    }),
    {
      headers: { Authorization: "Bearer overrideAxios" },
    },
  );

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200); // asserts local is used
  expect(res.token?.token).toBe("overrideAxios");
});
