/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Query parameters can also be provided in the request body as a JSON object
 */
export type PostGenerationsTextureRequestBody = {
    frontRotationOffset?: number | null | undefined;
    modelAssetId?: string | undefined;
    negativePrompt?: string | null | undefined;
    preview?: boolean | null | undefined;
    previewDirection?: string | null | undefined;
    prompt?: string | undefined;
    sdVersion?: string | null | undefined;
    seed?: number | null | undefined;
};

export type TextureGenerationJobOutput = {
    /**
     * API Credits Cost for Texture Generation. Available for Production API Users.
     */
    apiCreditCost?: number | null | undefined;
    id?: string | undefined;
};

/**
 * Responses for POST /api/rest/v1/generations-texture
 */
export type PostGenerationsTextureResponseBody = {
    textureGenerationJob?: TextureGenerationJobOutput | null | undefined;
};

export type PostGenerationsTextureResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /api/rest/v1/generations-texture
     */
    object?: PostGenerationsTextureResponseBody | undefined;
};

/** @internal */
export namespace PostGenerationsTextureRequestBody$ {
    export type Inbound = {
        front_rotation_offset?: number | null | undefined;
        modelAssetId?: string | undefined;
        negative_prompt?: string | null | undefined;
        preview?: boolean | null | undefined;
        preview_direction?: string | null | undefined;
        prompt?: string | undefined;
        sd_version?: string | null | undefined;
        seed?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostGenerationsTextureRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            front_rotation_offset: z.nullable(z.number().int()).optional(),
            modelAssetId: z.string().optional(),
            negative_prompt: z.nullable(z.string()).optional(),
            preview: z.nullable(z.boolean()).optional(),
            preview_direction: z.nullable(z.string()).optional(),
            prompt: z.string().optional(),
            sd_version: z.nullable(z.string()).optional(),
            seed: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.front_rotation_offset === undefined
                    ? null
                    : { frontRotationOffset: v.front_rotation_offset }),
                ...(v.modelAssetId === undefined ? null : { modelAssetId: v.modelAssetId }),
                ...(v.negative_prompt === undefined ? null : { negativePrompt: v.negative_prompt }),
                ...(v.preview === undefined ? null : { preview: v.preview }),
                ...(v.preview_direction === undefined
                    ? null
                    : { previewDirection: v.preview_direction }),
                ...(v.prompt === undefined ? null : { prompt: v.prompt }),
                ...(v.sd_version === undefined ? null : { sdVersion: v.sd_version }),
                ...(v.seed === undefined ? null : { seed: v.seed }),
            };
        });

    export type Outbound = {
        front_rotation_offset?: number | null | undefined;
        modelAssetId?: string | undefined;
        negative_prompt?: string | null | undefined;
        preview?: boolean | null | undefined;
        preview_direction?: string | null | undefined;
        prompt?: string | undefined;
        sd_version?: string | null | undefined;
        seed?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostGenerationsTextureRequestBody
    > = z
        .object({
            frontRotationOffset: z.nullable(z.number().int()).optional(),
            modelAssetId: z.string().optional(),
            negativePrompt: z.nullable(z.string()).optional(),
            preview: z.nullable(z.boolean()).optional(),
            previewDirection: z.nullable(z.string()).optional(),
            prompt: z.string().optional(),
            sdVersion: z.nullable(z.string()).optional(),
            seed: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.frontRotationOffset === undefined
                    ? null
                    : { front_rotation_offset: v.frontRotationOffset }),
                ...(v.modelAssetId === undefined ? null : { modelAssetId: v.modelAssetId }),
                ...(v.negativePrompt === undefined ? null : { negative_prompt: v.negativePrompt }),
                ...(v.preview === undefined ? null : { preview: v.preview }),
                ...(v.previewDirection === undefined
                    ? null
                    : { preview_direction: v.previewDirection }),
                ...(v.prompt === undefined ? null : { prompt: v.prompt }),
                ...(v.sdVersion === undefined ? null : { sd_version: v.sdVersion }),
                ...(v.seed === undefined ? null : { seed: v.seed }),
            };
        });
}

/** @internal */
export namespace TextureGenerationJobOutput$ {
    export type Inbound = {
        apiCreditCost?: number | null | undefined;
        id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TextureGenerationJobOutput, z.ZodTypeDef, Inbound> = z
        .object({
            apiCreditCost: z.nullable(z.number().int()).optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiCreditCost === undefined ? null : { apiCreditCost: v.apiCreditCost }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        apiCreditCost?: number | null | undefined;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TextureGenerationJobOutput> = z
        .object({
            apiCreditCost: z.nullable(z.number().int()).optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiCreditCost === undefined ? null : { apiCreditCost: v.apiCreditCost }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace PostGenerationsTextureResponseBody$ {
    export type Inbound = {
        textureGenerationJob?: TextureGenerationJobOutput$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostGenerationsTextureResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            textureGenerationJob: z
                .nullable(z.lazy(() => TextureGenerationJobOutput$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.textureGenerationJob === undefined
                    ? null
                    : { textureGenerationJob: v.textureGenerationJob }),
            };
        });

    export type Outbound = {
        textureGenerationJob?: TextureGenerationJobOutput$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostGenerationsTextureResponseBody
    > = z
        .object({
            textureGenerationJob: z
                .nullable(z.lazy(() => TextureGenerationJobOutput$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.textureGenerationJob === undefined
                    ? null
                    : { textureGenerationJob: v.textureGenerationJob }),
            };
        });
}

/** @internal */
export namespace PostGenerationsTextureResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PostGenerationsTextureResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostGenerationsTextureResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PostGenerationsTextureResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PostGenerationsTextureResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostGenerationsTextureResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                object: z.lazy(() => PostGenerationsTextureResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.object === undefined ? null : { object: v.object }),
                };
            });
}
