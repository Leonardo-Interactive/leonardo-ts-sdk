/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type GetModelByIdRequest = {
    /**
     * The ID of the custom model to return.
     */
    id: string;
};

/**
 * columns and relationships of "custom_models"
 */
export type GetModelByIdCustomModels = {
    createdAt?: string | undefined;
    description?: string | undefined;
    id?: string | null | undefined;
    instancePrompt?: string | null | undefined;
    modelHeight?: number | undefined;
    modelWidth?: number | undefined;
    name?: string | undefined;
    public?: boolean | undefined;
    /**
     * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5.
     */
    sdVersion?: shared.SdVersions | undefined;
    /**
     * The status of the current task.
     */
    status?: shared.JobStatus | undefined;
    /**
     * The category the most accurately reflects the model.
     */
    type?: shared.CustomModelType | undefined;
    updatedAt?: string | undefined;
};

/**
 * Responses for GET /models/{id}
 */
export type GetModelByIdResponseBody = {
    /**
     * columns and relationships of "custom_models"
     */
    customModelsByPk?: GetModelByIdCustomModels | null | undefined;
};

export type GetModelByIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for GET /models/{id}
     */
    object?: GetModelByIdResponseBody | undefined;
};

/** @internal */
export namespace GetModelByIdRequest$ {
    export type Inbound = {
        id: string;
    };

    export const inboundSchema: z.ZodType<GetModelByIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetModelByIdRequest> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export namespace GetModelByIdCustomModels$ {
    export type Inbound = {
        createdAt?: string | undefined;
        description?: string | undefined;
        id?: string | null | undefined;
        instancePrompt?: string | null | undefined;
        modelHeight?: number | undefined;
        modelWidth?: number | undefined;
        name?: string | undefined;
        public?: boolean | undefined;
        sdVersion?: shared.SdVersions | undefined;
        status?: shared.JobStatus | undefined;
        type?: shared.CustomModelType | undefined;
        updatedAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetModelByIdCustomModels, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z.string().optional(),
            description: z.string().optional(),
            id: z.nullable(z.string()).optional(),
            instancePrompt: z.nullable(z.string()).optional(),
            modelHeight: z.number().int().optional(),
            modelWidth: z.number().int().optional(),
            name: z.string().optional(),
            public: z.boolean().optional(),
            sdVersion: shared.SdVersions$.optional(),
            status: shared.JobStatus$.optional(),
            type: shared.CustomModelType$.default(shared.CustomModelType.General),
            updatedAt: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.instancePrompt === undefined ? null : { instancePrompt: v.instancePrompt }),
                ...(v.modelHeight === undefined ? null : { modelHeight: v.modelHeight }),
                ...(v.modelWidth === undefined ? null : { modelWidth: v.modelWidth }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.public === undefined ? null : { public: v.public }),
                ...(v.sdVersion === undefined ? null : { sdVersion: v.sdVersion }),
                ...(v.status === undefined ? null : { status: v.status }),
                type: v.type,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        createdAt?: string | undefined;
        description?: string | undefined;
        id?: string | null | undefined;
        instancePrompt?: string | null | undefined;
        modelHeight?: number | undefined;
        modelWidth?: number | undefined;
        name?: string | undefined;
        public?: boolean | undefined;
        sdVersion?: shared.SdVersions | undefined;
        status?: shared.JobStatus | undefined;
        type: shared.CustomModelType;
        updatedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetModelByIdCustomModels> = z
        .object({
            createdAt: z.string().optional(),
            description: z.string().optional(),
            id: z.nullable(z.string()).optional(),
            instancePrompt: z.nullable(z.string()).optional(),
            modelHeight: z.number().int().optional(),
            modelWidth: z.number().int().optional(),
            name: z.string().optional(),
            public: z.boolean().optional(),
            sdVersion: shared.SdVersions$.optional(),
            status: shared.JobStatus$.optional(),
            type: shared.CustomModelType$.default(shared.CustomModelType.General),
            updatedAt: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.instancePrompt === undefined ? null : { instancePrompt: v.instancePrompt }),
                ...(v.modelHeight === undefined ? null : { modelHeight: v.modelHeight }),
                ...(v.modelWidth === undefined ? null : { modelWidth: v.modelWidth }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.public === undefined ? null : { public: v.public }),
                ...(v.sdVersion === undefined ? null : { sdVersion: v.sdVersion }),
                ...(v.status === undefined ? null : { status: v.status }),
                type: v.type,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

/** @internal */
export namespace GetModelByIdResponseBody$ {
    export type Inbound = {
        custom_models_by_pk?: GetModelByIdCustomModels$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<GetModelByIdResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            custom_models_by_pk: z
                .nullable(z.lazy(() => GetModelByIdCustomModels$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.custom_models_by_pk === undefined
                    ? null
                    : { customModelsByPk: v.custom_models_by_pk }),
            };
        });

    export type Outbound = {
        custom_models_by_pk?: GetModelByIdCustomModels$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetModelByIdResponseBody> = z
        .object({
            customModelsByPk: z
                .nullable(z.lazy(() => GetModelByIdCustomModels$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.customModelsByPk === undefined
                    ? null
                    : { custom_models_by_pk: v.customModelsByPk }),
            };
        });
}

/** @internal */
export namespace GetModelByIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetModelByIdResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetModelByIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetModelByIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetModelByIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetModelByIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetModelByIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
