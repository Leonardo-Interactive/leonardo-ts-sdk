/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteElementByIdRequest = {
  /**
   * The ID of the element to delete.
   */
  id: number;
};

/**
 * columns and relationships of "user_loras".
 */
export type UserLoras = {
  id?: number | undefined;
};

/**
 * Responses for DELETE /models/{id}
 */
export type DeleteElementByIdResponseBody = {
  /**
   * columns and relationships of "user_loras".
   */
  deleteUserLorasByPk?: UserLoras | null | undefined;
};

export type DeleteElementByIdResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for DELETE /models/{id}
   */
  object?: DeleteElementByIdResponseBody | undefined;
};

/** @internal */
export const DeleteElementByIdRequest$inboundSchema: z.ZodType<
  DeleteElementByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
});

/** @internal */
export type DeleteElementByIdRequest$Outbound = {
  id: number;
};

/** @internal */
export const DeleteElementByIdRequest$outboundSchema: z.ZodType<
  DeleteElementByIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteElementByIdRequest
> = z.object({
  id: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteElementByIdRequest$ {
  /** @deprecated use `DeleteElementByIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteElementByIdRequest$inboundSchema;
  /** @deprecated use `DeleteElementByIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteElementByIdRequest$outboundSchema;
  /** @deprecated use `DeleteElementByIdRequest$Outbound` instead. */
  export type Outbound = DeleteElementByIdRequest$Outbound;
}

export function deleteElementByIdRequestToJSON(
  deleteElementByIdRequest: DeleteElementByIdRequest,
): string {
  return JSON.stringify(
    DeleteElementByIdRequest$outboundSchema.parse(deleteElementByIdRequest),
  );
}

export function deleteElementByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteElementByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteElementByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteElementByIdRequest' from JSON`,
  );
}

/** @internal */
export const UserLoras$inboundSchema: z.ZodType<
  UserLoras,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
});

/** @internal */
export type UserLoras$Outbound = {
  id?: number | undefined;
};

/** @internal */
export const UserLoras$outboundSchema: z.ZodType<
  UserLoras$Outbound,
  z.ZodTypeDef,
  UserLoras
> = z.object({
  id: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserLoras$ {
  /** @deprecated use `UserLoras$inboundSchema` instead. */
  export const inboundSchema = UserLoras$inboundSchema;
  /** @deprecated use `UserLoras$outboundSchema` instead. */
  export const outboundSchema = UserLoras$outboundSchema;
  /** @deprecated use `UserLoras$Outbound` instead. */
  export type Outbound = UserLoras$Outbound;
}

export function userLorasToJSON(userLoras: UserLoras): string {
  return JSON.stringify(UserLoras$outboundSchema.parse(userLoras));
}

export function userLorasFromJSON(
  jsonString: string,
): SafeParseResult<UserLoras, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserLoras$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserLoras' from JSON`,
  );
}

/** @internal */
export const DeleteElementByIdResponseBody$inboundSchema: z.ZodType<
  DeleteElementByIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  delete_user_loras_by_pk: z.nullable(z.lazy(() => UserLoras$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "delete_user_loras_by_pk": "deleteUserLorasByPk",
  });
});

/** @internal */
export type DeleteElementByIdResponseBody$Outbound = {
  delete_user_loras_by_pk?: UserLoras$Outbound | null | undefined;
};

/** @internal */
export const DeleteElementByIdResponseBody$outboundSchema: z.ZodType<
  DeleteElementByIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteElementByIdResponseBody
> = z.object({
  deleteUserLorasByPk: z.nullable(z.lazy(() => UserLoras$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    deleteUserLorasByPk: "delete_user_loras_by_pk",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteElementByIdResponseBody$ {
  /** @deprecated use `DeleteElementByIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteElementByIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteElementByIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteElementByIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteElementByIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteElementByIdResponseBody$Outbound;
}

export function deleteElementByIdResponseBodyToJSON(
  deleteElementByIdResponseBody: DeleteElementByIdResponseBody,
): string {
  return JSON.stringify(
    DeleteElementByIdResponseBody$outboundSchema.parse(
      deleteElementByIdResponseBody,
    ),
  );
}

export function deleteElementByIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteElementByIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteElementByIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteElementByIdResponseBody' from JSON`,
  );
}

/** @internal */
export const DeleteElementByIdResponse$inboundSchema: z.ZodType<
  DeleteElementByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => DeleteElementByIdResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DeleteElementByIdResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: DeleteElementByIdResponseBody$Outbound | undefined;
};

/** @internal */
export const DeleteElementByIdResponse$outboundSchema: z.ZodType<
  DeleteElementByIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteElementByIdResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => DeleteElementByIdResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteElementByIdResponse$ {
  /** @deprecated use `DeleteElementByIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteElementByIdResponse$inboundSchema;
  /** @deprecated use `DeleteElementByIdResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteElementByIdResponse$outboundSchema;
  /** @deprecated use `DeleteElementByIdResponse$Outbound` instead. */
  export type Outbound = DeleteElementByIdResponse$Outbound;
}

export function deleteElementByIdResponseToJSON(
  deleteElementByIdResponse: DeleteElementByIdResponse,
): string {
  return JSON.stringify(
    DeleteElementByIdResponse$outboundSchema.parse(deleteElementByIdResponse),
  );
}

export function deleteElementByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteElementByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteElementByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteElementByIdResponse' from JSON`,
  );
}
