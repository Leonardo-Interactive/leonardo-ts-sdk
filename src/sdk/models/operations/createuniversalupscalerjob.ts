/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

/**
 * Query parameters are provided in the request body as a JSON object
 */
export type CreateUniversalUpscalerJobRequestBody = {
    /**
     * The creativity strength of the universal upscaler, must be integer between 1 and 10
     */
    creativityStrength?: number | null | undefined;
    /**
     * The ID of the generated image
     */
    generatedImageId?: string | null | undefined;
    /**
     * The ID of the init image uploaded
     */
    initImageId?: string | null | undefined;
    /**
     * The prompt for the universal upscaler
     */
    prompt?: string | null | undefined;
    /**
     * The upscale multiplier of the universal upscaler, must be number between 1.00 and 2.00
     */
    upscaleMultiplier?: number | null | undefined;
    /**
     * The style to upscale images using universal upscaler with.
     */
    upscalerStyle?: shared.UniversalUpscalerStyle | null | undefined;
    /**
     * The ID of the variation image
     */
    variationId?: string | null | undefined;
};

export type UniversalUpscalerOutput = {
    /**
     * API Credits Cost for Universal Upscaler Variation. Available for Production API Users.
     */
    apiCreditCost?: number | null | undefined;
    id?: string | null | undefined;
};

/**
 * Responses for POST /variations/universal-upscaler
 */
export type CreateUniversalUpscalerJobResponseBody = {
    universalUpscaler?: UniversalUpscalerOutput | undefined;
};

export type CreateUniversalUpscalerJobResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /variations/universal-upscaler
     */
    object?: CreateUniversalUpscalerJobResponseBody | undefined;
};

/** @internal */
export namespace CreateUniversalUpscalerJobRequestBody$ {
    export const inboundSchema: z.ZodType<
        CreateUniversalUpscalerJobRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            creativityStrength: z.nullable(z.number().int().default(5)),
            generatedImageId: z.nullable(z.string()).optional(),
            initImageId: z.nullable(z.string()).optional(),
            prompt: z.nullable(z.string()).optional(),
            upscaleMultiplier: z.nullable(z.number().default(1.5)),
            upscalerStyle: z.nullable(
                shared.UniversalUpscalerStyle$.inboundSchema.default(
                    shared.UniversalUpscalerStyle.General
                )
            ),
            variationId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                creativityStrength: v.creativityStrength,
                ...(v.generatedImageId === undefined
                    ? null
                    : { generatedImageId: v.generatedImageId }),
                ...(v.initImageId === undefined ? null : { initImageId: v.initImageId }),
                ...(v.prompt === undefined ? null : { prompt: v.prompt }),
                upscaleMultiplier: v.upscaleMultiplier,
                upscalerStyle: v.upscalerStyle,
                ...(v.variationId === undefined ? null : { variationId: v.variationId }),
            };
        });

    export type Outbound = {
        creativityStrength: number | null;
        generatedImageId?: string | null | undefined;
        initImageId?: string | null | undefined;
        prompt?: string | null | undefined;
        upscaleMultiplier: number | null;
        upscalerStyle: string | null;
        variationId?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateUniversalUpscalerJobRequestBody
    > = z
        .object({
            creativityStrength: z.nullable(z.number().int().default(5)),
            generatedImageId: z.nullable(z.string()).optional(),
            initImageId: z.nullable(z.string()).optional(),
            prompt: z.nullable(z.string()).optional(),
            upscaleMultiplier: z.nullable(z.number().default(1.5)),
            upscalerStyle: z.nullable(
                shared.UniversalUpscalerStyle$.outboundSchema.default(
                    shared.UniversalUpscalerStyle.General
                )
            ),
            variationId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                creativityStrength: v.creativityStrength,
                ...(v.generatedImageId === undefined
                    ? null
                    : { generatedImageId: v.generatedImageId }),
                ...(v.initImageId === undefined ? null : { initImageId: v.initImageId }),
                ...(v.prompt === undefined ? null : { prompt: v.prompt }),
                upscaleMultiplier: v.upscaleMultiplier,
                upscalerStyle: v.upscalerStyle,
                ...(v.variationId === undefined ? null : { variationId: v.variationId }),
            };
        });
}

/** @internal */
export namespace UniversalUpscalerOutput$ {
    export const inboundSchema: z.ZodType<UniversalUpscalerOutput, z.ZodTypeDef, unknown> = z
        .object({
            apiCreditCost: z.nullable(z.number().int()).optional(),
            id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiCreditCost === undefined ? null : { apiCreditCost: v.apiCreditCost }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        apiCreditCost?: number | null | undefined;
        id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UniversalUpscalerOutput> = z
        .object({
            apiCreditCost: z.nullable(z.number().int()).optional(),
            id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiCreditCost === undefined ? null : { apiCreditCost: v.apiCreditCost }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace CreateUniversalUpscalerJobResponseBody$ {
    export const inboundSchema: z.ZodType<
        CreateUniversalUpscalerJobResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            universalUpscaler: z.lazy(() => UniversalUpscalerOutput$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.universalUpscaler === undefined
                    ? null
                    : { universalUpscaler: v.universalUpscaler }),
            };
        });

    export type Outbound = {
        universalUpscaler?: UniversalUpscalerOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateUniversalUpscalerJobResponseBody
    > = z
        .object({
            universalUpscaler: z.lazy(() => UniversalUpscalerOutput$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.universalUpscaler === undefined
                    ? null
                    : { universalUpscaler: v.universalUpscaler }),
            };
        });
}

/** @internal */
export namespace CreateUniversalUpscalerJobResponse$ {
    export const inboundSchema: z.ZodType<
        CreateUniversalUpscalerJobResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => CreateUniversalUpscalerJobResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: CreateUniversalUpscalerJobResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateUniversalUpscalerJobResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => CreateUniversalUpscalerJobResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
