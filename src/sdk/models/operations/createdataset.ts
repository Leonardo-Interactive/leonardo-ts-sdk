/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Query parameters to be provided in the request body as a JSON object
 */
export type CreateDatasetRequestBody = {
  /**
   * A description for the dataset.
   */
  description?: string | null | undefined;
  /**
   * The name of the dataset.
   */
  name: string;
};

/**
 * columns and relationships of "datasets"
 */
export type Datasets = {
  id?: string | null | undefined;
};

/**
 * Responses for POST /datasets
 */
export type CreateDatasetResponseBody = {
  /**
   * columns and relationships of "datasets"
   */
  insertDatasetsOne?: Datasets | null | undefined;
};

export type CreateDatasetResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for POST /datasets
   */
  object?: CreateDatasetResponseBody | undefined;
};

/** @internal */
export const CreateDatasetRequestBody$inboundSchema: z.ZodType<
  CreateDatasetRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  name: z.string(),
});

/** @internal */
export type CreateDatasetRequestBody$Outbound = {
  description?: string | null | undefined;
  name: string;
};

/** @internal */
export const CreateDatasetRequestBody$outboundSchema: z.ZodType<
  CreateDatasetRequestBody$Outbound,
  z.ZodTypeDef,
  CreateDatasetRequestBody
> = z.object({
  description: z.nullable(z.string()).optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetRequestBody$ {
  /** @deprecated use `CreateDatasetRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetRequestBody$inboundSchema;
  /** @deprecated use `CreateDatasetRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetRequestBody$outboundSchema;
  /** @deprecated use `CreateDatasetRequestBody$Outbound` instead. */
  export type Outbound = CreateDatasetRequestBody$Outbound;
}

export function createDatasetRequestBodyToJSON(
  createDatasetRequestBody: CreateDatasetRequestBody,
): string {
  return JSON.stringify(
    CreateDatasetRequestBody$outboundSchema.parse(createDatasetRequestBody),
  );
}

export function createDatasetRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetRequestBody' from JSON`,
  );
}

/** @internal */
export const Datasets$inboundSchema: z.ZodType<
  Datasets,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type Datasets$Outbound = {
  id?: string | null | undefined;
};

/** @internal */
export const Datasets$outboundSchema: z.ZodType<
  Datasets$Outbound,
  z.ZodTypeDef,
  Datasets
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Datasets$ {
  /** @deprecated use `Datasets$inboundSchema` instead. */
  export const inboundSchema = Datasets$inboundSchema;
  /** @deprecated use `Datasets$outboundSchema` instead. */
  export const outboundSchema = Datasets$outboundSchema;
  /** @deprecated use `Datasets$Outbound` instead. */
  export type Outbound = Datasets$Outbound;
}

export function datasetsToJSON(datasets: Datasets): string {
  return JSON.stringify(Datasets$outboundSchema.parse(datasets));
}

export function datasetsFromJSON(
  jsonString: string,
): SafeParseResult<Datasets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Datasets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Datasets' from JSON`,
  );
}

/** @internal */
export const CreateDatasetResponseBody$inboundSchema: z.ZodType<
  CreateDatasetResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  insert_datasets_one: z.nullable(z.lazy(() => Datasets$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "insert_datasets_one": "insertDatasetsOne",
  });
});

/** @internal */
export type CreateDatasetResponseBody$Outbound = {
  insert_datasets_one?: Datasets$Outbound | null | undefined;
};

/** @internal */
export const CreateDatasetResponseBody$outboundSchema: z.ZodType<
  CreateDatasetResponseBody$Outbound,
  z.ZodTypeDef,
  CreateDatasetResponseBody
> = z.object({
  insertDatasetsOne: z.nullable(z.lazy(() => Datasets$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    insertDatasetsOne: "insert_datasets_one",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetResponseBody$ {
  /** @deprecated use `CreateDatasetResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetResponseBody$inboundSchema;
  /** @deprecated use `CreateDatasetResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetResponseBody$outboundSchema;
  /** @deprecated use `CreateDatasetResponseBody$Outbound` instead. */
  export type Outbound = CreateDatasetResponseBody$Outbound;
}

export function createDatasetResponseBodyToJSON(
  createDatasetResponseBody: CreateDatasetResponseBody,
): string {
  return JSON.stringify(
    CreateDatasetResponseBody$outboundSchema.parse(createDatasetResponseBody),
  );
}

export function createDatasetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateDatasetResponse$inboundSchema: z.ZodType<
  CreateDatasetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => CreateDatasetResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type CreateDatasetResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: CreateDatasetResponseBody$Outbound | undefined;
};

/** @internal */
export const CreateDatasetResponse$outboundSchema: z.ZodType<
  CreateDatasetResponse$Outbound,
  z.ZodTypeDef,
  CreateDatasetResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => CreateDatasetResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetResponse$ {
  /** @deprecated use `CreateDatasetResponse$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetResponse$inboundSchema;
  /** @deprecated use `CreateDatasetResponse$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetResponse$outboundSchema;
  /** @deprecated use `CreateDatasetResponse$Outbound` instead. */
  export type Outbound = CreateDatasetResponse$Outbound;
}

export function createDatasetResponseToJSON(
  createDatasetResponse: CreateDatasetResponse,
): string {
  return JSON.stringify(
    CreateDatasetResponse$outboundSchema.parse(createDatasetResponse),
  );
}

export function createDatasetResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetResponse' from JSON`,
  );
}
