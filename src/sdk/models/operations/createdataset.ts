/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

/**
 * Query parameters to be provided in the request body as a JSON object
 */
export type CreateDatasetRequestBody = {
    /**
     * A description for the dataset.
     */
    description?: string | null | undefined;
    /**
     * The name of the dataset.
     */
    name: string;
};

/**
 * columns and relationships of "datasets"
 */
export type Datasets = {
    id?: string | null | undefined;
};

/**
 * Responses for POST /datasets
 */
export type CreateDatasetResponseBody = {
    /**
     * columns and relationships of "datasets"
     */
    insertDatasetsOne?: Datasets | null | undefined;
};

export type CreateDatasetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /datasets
     */
    object?: CreateDatasetResponseBody | undefined;
};

/** @internal */
export namespace CreateDatasetRequestBody$ {
    export const inboundSchema: z.ZodType<CreateDatasetRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            description: z.nullable(z.string()).optional(),
            name: z.string(),
        });

    export type Outbound = {
        description?: string | null | undefined;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateDatasetRequestBody> =
        z.object({
            description: z.nullable(z.string()).optional(),
            name: z.string(),
        });
}

/** @internal */
export namespace Datasets$ {
    export const inboundSchema: z.ZodType<Datasets, z.ZodTypeDef, unknown> = z.object({
        id: z.nullable(z.string()).optional(),
    });

    export type Outbound = {
        id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Datasets> = z.object({
        id: z.nullable(z.string()).optional(),
    });
}

/** @internal */
export namespace CreateDatasetResponseBody$ {
    export const inboundSchema: z.ZodType<CreateDatasetResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            insert_datasets_one: z.nullable(z.lazy(() => Datasets$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                insert_datasets_one: "insertDatasetsOne",
            });
        });

    export type Outbound = {
        insert_datasets_one?: Datasets$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateDatasetResponseBody> = z
        .object({
            insertDatasetsOne: z.nullable(z.lazy(() => Datasets$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                insertDatasetsOne: "insert_datasets_one",
            });
        });
}

/** @internal */
export namespace CreateDatasetResponse$ {
    export const inboundSchema: z.ZodType<CreateDatasetResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => CreateDatasetResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: CreateDatasetResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateDatasetResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => CreateDatasetResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
