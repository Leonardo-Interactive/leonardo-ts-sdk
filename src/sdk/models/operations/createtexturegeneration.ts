/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

/**
 * Query parameters can also be provided in the request body as a JSON object
 */
export type CreateTextureGenerationRequestBody = {
    frontRotationOffset?: number | null | undefined;
    modelAssetId?: string | undefined;
    negativePrompt?: string | null | undefined;
    preview?: boolean | null | undefined;
    previewDirection?: string | null | undefined;
    prompt?: string | undefined;
    sdVersion?: string | null | undefined;
    seed?: number | null | undefined;
};

export type TextureGenerationJobOutput = {
    /**
     * API Credits Cost for Texture Generation. Available for Production API Users.
     */
    apiCreditCost?: number | null | undefined;
    id?: string | undefined;
};

/**
 * Responses for POST /api/rest/v1/generations-texture
 */
export type CreateTextureGenerationResponseBody = {
    textureGenerationJob?: TextureGenerationJobOutput | null | undefined;
};

export type CreateTextureGenerationResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /api/rest/v1/generations-texture
     */
    object?: CreateTextureGenerationResponseBody | undefined;
};

/** @internal */
export namespace CreateTextureGenerationRequestBody$ {
    export const inboundSchema: z.ZodType<
        CreateTextureGenerationRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            front_rotation_offset: z.nullable(z.number().int()).optional(),
            modelAssetId: z.string().optional(),
            negative_prompt: z.nullable(z.string()).optional(),
            preview: z.nullable(z.boolean()).optional(),
            preview_direction: z.nullable(z.string()).optional(),
            prompt: z.string().optional(),
            sd_version: z.nullable(z.string()).optional(),
            seed: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                front_rotation_offset: "frontRotationOffset",
                negative_prompt: "negativePrompt",
                preview_direction: "previewDirection",
                sd_version: "sdVersion",
            });
        });

    export type Outbound = {
        front_rotation_offset?: number | null | undefined;
        modelAssetId?: string | undefined;
        negative_prompt?: string | null | undefined;
        preview?: boolean | null | undefined;
        preview_direction?: string | null | undefined;
        prompt?: string | undefined;
        sd_version?: string | null | undefined;
        seed?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateTextureGenerationRequestBody
    > = z
        .object({
            frontRotationOffset: z.nullable(z.number().int()).optional(),
            modelAssetId: z.string().optional(),
            negativePrompt: z.nullable(z.string()).optional(),
            preview: z.nullable(z.boolean()).optional(),
            previewDirection: z.nullable(z.string()).optional(),
            prompt: z.string().optional(),
            sdVersion: z.nullable(z.string()).optional(),
            seed: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                frontRotationOffset: "front_rotation_offset",
                negativePrompt: "negative_prompt",
                previewDirection: "preview_direction",
                sdVersion: "sd_version",
            });
        });
}

/** @internal */
export namespace TextureGenerationJobOutput$ {
    export const inboundSchema: z.ZodType<TextureGenerationJobOutput, z.ZodTypeDef, unknown> =
        z.object({
            apiCreditCost: z.nullable(z.number().int()).optional(),
            id: z.string().optional(),
        });

    export type Outbound = {
        apiCreditCost?: number | null | undefined;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TextureGenerationJobOutput> =
        z.object({
            apiCreditCost: z.nullable(z.number().int()).optional(),
            id: z.string().optional(),
        });
}

/** @internal */
export namespace CreateTextureGenerationResponseBody$ {
    export const inboundSchema: z.ZodType<
        CreateTextureGenerationResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        textureGenerationJob: z
            .nullable(z.lazy(() => TextureGenerationJobOutput$.inboundSchema))
            .optional(),
    });

    export type Outbound = {
        textureGenerationJob?: TextureGenerationJobOutput$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateTextureGenerationResponseBody
    > = z.object({
        textureGenerationJob: z
            .nullable(z.lazy(() => TextureGenerationJobOutput$.outboundSchema))
            .optional(),
    });
}

/** @internal */
export namespace CreateTextureGenerationResponse$ {
    export const inboundSchema: z.ZodType<CreateTextureGenerationResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                object: z.lazy(() => CreateTextureGenerationResponseBody$.inboundSchema).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    ContentType: "contentType",
                    StatusCode: "statusCode",
                    RawResponse: "rawResponse",
                });
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: CreateTextureGenerationResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateTextureGenerationResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => CreateTextureGenerationResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
