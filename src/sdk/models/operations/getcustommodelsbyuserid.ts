/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetCustomModelsByUserIdRequest = {
  /**
   * The ID of the user to return.
   */
  userId: string;
};

/**
 * columns and relationships of "custom_models"
 */
export type GetCustomModelsByUserIdCustomModels = {
  createdAt?: string | undefined;
  description?: string | undefined;
  id?: string | null | undefined;
  instancePrompt?: string | null | undefined;
  modelHeight?: number | undefined;
  modelWidth?: number | undefined;
  name?: string | undefined;
  public?: boolean | undefined;
  /**
   * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5. Also includes SDXL and SDXL Lightning models
   */
  sdVersion?: shared.SdVersions | undefined;
  /**
   * The status of the current task.
   */
  status?: shared.JobStatus | undefined;
  /**
   * The category the most accurately reflects the model.
   */
  type?: shared.CustomModelType | undefined;
  updatedAt?: string | undefined;
};

/**
 * Responses for GET /models/user/{userId}
 */
export type GetCustomModelsByUserIdResponseBody = {
  customModels?: Array<GetCustomModelsByUserIdCustomModels> | null | undefined;
};

export type GetCustomModelsByUserIdResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for GET /models/user/{userId}
   */
  object?: GetCustomModelsByUserIdResponseBody | undefined;
};

/** @internal */
export const GetCustomModelsByUserIdRequest$inboundSchema: z.ZodType<
  GetCustomModelsByUserIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  userId: z.string(),
});

/** @internal */
export type GetCustomModelsByUserIdRequest$Outbound = {
  userId: string;
};

/** @internal */
export const GetCustomModelsByUserIdRequest$outboundSchema: z.ZodType<
  GetCustomModelsByUserIdRequest$Outbound,
  z.ZodTypeDef,
  GetCustomModelsByUserIdRequest
> = z.object({
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomModelsByUserIdRequest$ {
  /** @deprecated use `GetCustomModelsByUserIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetCustomModelsByUserIdRequest$inboundSchema;
  /** @deprecated use `GetCustomModelsByUserIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetCustomModelsByUserIdRequest$outboundSchema;
  /** @deprecated use `GetCustomModelsByUserIdRequest$Outbound` instead. */
  export type Outbound = GetCustomModelsByUserIdRequest$Outbound;
}

export function getCustomModelsByUserIdRequestToJSON(
  getCustomModelsByUserIdRequest: GetCustomModelsByUserIdRequest,
): string {
  return JSON.stringify(
    GetCustomModelsByUserIdRequest$outboundSchema.parse(
      getCustomModelsByUserIdRequest,
    ),
  );
}

export function getCustomModelsByUserIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomModelsByUserIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomModelsByUserIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomModelsByUserIdRequest' from JSON`,
  );
}

/** @internal */
export const GetCustomModelsByUserIdCustomModels$inboundSchema: z.ZodType<
  GetCustomModelsByUserIdCustomModels,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string().optional(),
  description: z.string().optional(),
  id: z.nullable(z.string()).optional(),
  instancePrompt: z.nullable(z.string()).optional(),
  modelHeight: z.number().int().optional(),
  modelWidth: z.number().int().optional(),
  name: z.string().optional(),
  public: z.boolean().optional(),
  sdVersion: shared.SdVersions$inboundSchema.optional(),
  status: shared.JobStatus$inboundSchema.optional(),
  type: shared.CustomModelType$inboundSchema.default(
    shared.CustomModelType.General,
  ),
  updatedAt: z.string().optional(),
});

/** @internal */
export type GetCustomModelsByUserIdCustomModels$Outbound = {
  createdAt?: string | undefined;
  description?: string | undefined;
  id?: string | null | undefined;
  instancePrompt?: string | null | undefined;
  modelHeight?: number | undefined;
  modelWidth?: number | undefined;
  name?: string | undefined;
  public?: boolean | undefined;
  sdVersion?: string | undefined;
  status?: string | undefined;
  type: string;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetCustomModelsByUserIdCustomModels$outboundSchema: z.ZodType<
  GetCustomModelsByUserIdCustomModels$Outbound,
  z.ZodTypeDef,
  GetCustomModelsByUserIdCustomModels
> = z.object({
  createdAt: z.string().optional(),
  description: z.string().optional(),
  id: z.nullable(z.string()).optional(),
  instancePrompt: z.nullable(z.string()).optional(),
  modelHeight: z.number().int().optional(),
  modelWidth: z.number().int().optional(),
  name: z.string().optional(),
  public: z.boolean().optional(),
  sdVersion: shared.SdVersions$outboundSchema.optional(),
  status: shared.JobStatus$outboundSchema.optional(),
  type: shared.CustomModelType$outboundSchema.default(
    shared.CustomModelType.General,
  ),
  updatedAt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomModelsByUserIdCustomModels$ {
  /** @deprecated use `GetCustomModelsByUserIdCustomModels$inboundSchema` instead. */
  export const inboundSchema =
    GetCustomModelsByUserIdCustomModels$inboundSchema;
  /** @deprecated use `GetCustomModelsByUserIdCustomModels$outboundSchema` instead. */
  export const outboundSchema =
    GetCustomModelsByUserIdCustomModels$outboundSchema;
  /** @deprecated use `GetCustomModelsByUserIdCustomModels$Outbound` instead. */
  export type Outbound = GetCustomModelsByUserIdCustomModels$Outbound;
}

export function getCustomModelsByUserIdCustomModelsToJSON(
  getCustomModelsByUserIdCustomModels: GetCustomModelsByUserIdCustomModels,
): string {
  return JSON.stringify(
    GetCustomModelsByUserIdCustomModels$outboundSchema.parse(
      getCustomModelsByUserIdCustomModels,
    ),
  );
}

export function getCustomModelsByUserIdCustomModelsFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomModelsByUserIdCustomModels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetCustomModelsByUserIdCustomModels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomModelsByUserIdCustomModels' from JSON`,
  );
}

/** @internal */
export const GetCustomModelsByUserIdResponseBody$inboundSchema: z.ZodType<
  GetCustomModelsByUserIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  custom_models: z.nullable(
    z.array(z.lazy(() => GetCustomModelsByUserIdCustomModels$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_models": "customModels",
  });
});

/** @internal */
export type GetCustomModelsByUserIdResponseBody$Outbound = {
  custom_models?:
    | Array<GetCustomModelsByUserIdCustomModels$Outbound>
    | null
    | undefined;
};

/** @internal */
export const GetCustomModelsByUserIdResponseBody$outboundSchema: z.ZodType<
  GetCustomModelsByUserIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetCustomModelsByUserIdResponseBody
> = z.object({
  customModels: z.nullable(
    z.array(z.lazy(() => GetCustomModelsByUserIdCustomModels$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customModels: "custom_models",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomModelsByUserIdResponseBody$ {
  /** @deprecated use `GetCustomModelsByUserIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetCustomModelsByUserIdResponseBody$inboundSchema;
  /** @deprecated use `GetCustomModelsByUserIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetCustomModelsByUserIdResponseBody$outboundSchema;
  /** @deprecated use `GetCustomModelsByUserIdResponseBody$Outbound` instead. */
  export type Outbound = GetCustomModelsByUserIdResponseBody$Outbound;
}

export function getCustomModelsByUserIdResponseBodyToJSON(
  getCustomModelsByUserIdResponseBody: GetCustomModelsByUserIdResponseBody,
): string {
  return JSON.stringify(
    GetCustomModelsByUserIdResponseBody$outboundSchema.parse(
      getCustomModelsByUserIdResponseBody,
    ),
  );
}

export function getCustomModelsByUserIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomModelsByUserIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetCustomModelsByUserIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomModelsByUserIdResponseBody' from JSON`,
  );
}

/** @internal */
export const GetCustomModelsByUserIdResponse$inboundSchema: z.ZodType<
  GetCustomModelsByUserIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => GetCustomModelsByUserIdResponseBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetCustomModelsByUserIdResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: GetCustomModelsByUserIdResponseBody$Outbound | undefined;
};

/** @internal */
export const GetCustomModelsByUserIdResponse$outboundSchema: z.ZodType<
  GetCustomModelsByUserIdResponse$Outbound,
  z.ZodTypeDef,
  GetCustomModelsByUserIdResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => GetCustomModelsByUserIdResponseBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomModelsByUserIdResponse$ {
  /** @deprecated use `GetCustomModelsByUserIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetCustomModelsByUserIdResponse$inboundSchema;
  /** @deprecated use `GetCustomModelsByUserIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetCustomModelsByUserIdResponse$outboundSchema;
  /** @deprecated use `GetCustomModelsByUserIdResponse$Outbound` instead. */
  export type Outbound = GetCustomModelsByUserIdResponse$Outbound;
}

export function getCustomModelsByUserIdResponseToJSON(
  getCustomModelsByUserIdResponse: GetCustomModelsByUserIdResponse,
): string {
  return JSON.stringify(
    GetCustomModelsByUserIdResponse$outboundSchema.parse(
      getCustomModelsByUserIdResponse,
    ),
  );
}

export function getCustomModelsByUserIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomModelsByUserIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomModelsByUserIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomModelsByUserIdResponse' from JSON`,
  );
}
