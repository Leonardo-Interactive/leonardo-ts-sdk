/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * columns and relationships of "users"
 */
export type Users = {
  id?: string | null | undefined;
  /**
   * Username of the user.
   */
  username?: string | null | undefined;
};

/**
 * columns and relationships of "user_details"
 */
export type UserDetails = {
  /**
   * API Concurrency Slots.
   */
  apiConcurrencySlots?: number | undefined;
  /**
   * Current balance of API paid tokens the user has.
   */
  apiPaidTokens?: number | null | undefined;
  /**
   * API Plan Token Renewal Date.
   */
  apiPlanTokenRenewalDate?: string | null | undefined;
  /**
   * Current balance of Enterprise API subscriptions tokens the user has.
   */
  apiSubscriptionTokens?: number | undefined;
  /**
   * Current balance of paid tokens the user has.
   */
  paidTokens?: number | null | undefined;
  /**
   * Current balance of user plan GPT tokens the user has.
   */
  subscriptionGptTokens?: number | undefined;
  /**
   * Current balance of model training tokens the user has.
   */
  subscriptionModelTokens?: number | undefined;
  /**
   * Current balance of user plan subscription tokens the user has.
   */
  subscriptionTokens?: number | undefined;
  /**
   * User Plan Token Renewal Date.
   */
  tokenRenewalDate?: string | null | undefined;
  /**
   * columns and relationships of "users"
   */
  user?: Users | null | undefined;
};

/**
 * Responses for GET /me
 */
export type GetUserSelfResponseBody = {
  userDetails?: Array<UserDetails> | undefined;
};

export type GetUserSelfResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for GET /me
   */
  object?: GetUserSelfResponseBody | undefined;
};

/** @internal */
export const Users$inboundSchema: z.ZodType<Users, z.ZodTypeDef, unknown> = z
  .object({
    id: z.nullable(z.string()).optional(),
    username: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Users$Outbound = {
  id?: string | null | undefined;
  username?: string | null | undefined;
};

/** @internal */
export const Users$outboundSchema: z.ZodType<
  Users$Outbound,
  z.ZodTypeDef,
  Users
> = z.object({
  id: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Users$ {
  /** @deprecated use `Users$inboundSchema` instead. */
  export const inboundSchema = Users$inboundSchema;
  /** @deprecated use `Users$outboundSchema` instead. */
  export const outboundSchema = Users$outboundSchema;
  /** @deprecated use `Users$Outbound` instead. */
  export type Outbound = Users$Outbound;
}

export function usersToJSON(users: Users): string {
  return JSON.stringify(Users$outboundSchema.parse(users));
}

export function usersFromJSON(
  jsonString: string,
): SafeParseResult<Users, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Users$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Users' from JSON`,
  );
}

/** @internal */
export const UserDetails$inboundSchema: z.ZodType<
  UserDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiConcurrencySlots: z.number().int().optional(),
  apiPaidTokens: z.nullable(z.number().int()).optional(),
  apiPlanTokenRenewalDate: z.nullable(z.string()).optional(),
  apiSubscriptionTokens: z.number().int().optional(),
  paidTokens: z.nullable(z.number().int()).optional(),
  subscriptionGptTokens: z.number().int().optional(),
  subscriptionModelTokens: z.number().int().optional(),
  subscriptionTokens: z.number().int().optional(),
  tokenRenewalDate: z.nullable(z.string()).optional(),
  user: z.nullable(z.lazy(() => Users$inboundSchema)).optional(),
});

/** @internal */
export type UserDetails$Outbound = {
  apiConcurrencySlots?: number | undefined;
  apiPaidTokens?: number | null | undefined;
  apiPlanTokenRenewalDate?: string | null | undefined;
  apiSubscriptionTokens?: number | undefined;
  paidTokens?: number | null | undefined;
  subscriptionGptTokens?: number | undefined;
  subscriptionModelTokens?: number | undefined;
  subscriptionTokens?: number | undefined;
  tokenRenewalDate?: string | null | undefined;
  user?: Users$Outbound | null | undefined;
};

/** @internal */
export const UserDetails$outboundSchema: z.ZodType<
  UserDetails$Outbound,
  z.ZodTypeDef,
  UserDetails
> = z.object({
  apiConcurrencySlots: z.number().int().optional(),
  apiPaidTokens: z.nullable(z.number().int()).optional(),
  apiPlanTokenRenewalDate: z.nullable(z.string()).optional(),
  apiSubscriptionTokens: z.number().int().optional(),
  paidTokens: z.nullable(z.number().int()).optional(),
  subscriptionGptTokens: z.number().int().optional(),
  subscriptionModelTokens: z.number().int().optional(),
  subscriptionTokens: z.number().int().optional(),
  tokenRenewalDate: z.nullable(z.string()).optional(),
  user: z.nullable(z.lazy(() => Users$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserDetails$ {
  /** @deprecated use `UserDetails$inboundSchema` instead. */
  export const inboundSchema = UserDetails$inboundSchema;
  /** @deprecated use `UserDetails$outboundSchema` instead. */
  export const outboundSchema = UserDetails$outboundSchema;
  /** @deprecated use `UserDetails$Outbound` instead. */
  export type Outbound = UserDetails$Outbound;
}

export function userDetailsToJSON(userDetails: UserDetails): string {
  return JSON.stringify(UserDetails$outboundSchema.parse(userDetails));
}

export function userDetailsFromJSON(
  jsonString: string,
): SafeParseResult<UserDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserDetails' from JSON`,
  );
}

/** @internal */
export const GetUserSelfResponseBody$inboundSchema: z.ZodType<
  GetUserSelfResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_details: z.array(z.lazy(() => UserDetails$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_details": "userDetails",
  });
});

/** @internal */
export type GetUserSelfResponseBody$Outbound = {
  user_details?: Array<UserDetails$Outbound> | undefined;
};

/** @internal */
export const GetUserSelfResponseBody$outboundSchema: z.ZodType<
  GetUserSelfResponseBody$Outbound,
  z.ZodTypeDef,
  GetUserSelfResponseBody
> = z.object({
  userDetails: z.array(z.lazy(() => UserDetails$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    userDetails: "user_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserSelfResponseBody$ {
  /** @deprecated use `GetUserSelfResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetUserSelfResponseBody$inboundSchema;
  /** @deprecated use `GetUserSelfResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetUserSelfResponseBody$outboundSchema;
  /** @deprecated use `GetUserSelfResponseBody$Outbound` instead. */
  export type Outbound = GetUserSelfResponseBody$Outbound;
}

export function getUserSelfResponseBodyToJSON(
  getUserSelfResponseBody: GetUserSelfResponseBody,
): string {
  return JSON.stringify(
    GetUserSelfResponseBody$outboundSchema.parse(getUserSelfResponseBody),
  );
}

export function getUserSelfResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetUserSelfResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserSelfResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserSelfResponseBody' from JSON`,
  );
}

/** @internal */
export const GetUserSelfResponse$inboundSchema: z.ZodType<
  GetUserSelfResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => GetUserSelfResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetUserSelfResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: GetUserSelfResponseBody$Outbound | undefined;
};

/** @internal */
export const GetUserSelfResponse$outboundSchema: z.ZodType<
  GetUserSelfResponse$Outbound,
  z.ZodTypeDef,
  GetUserSelfResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => GetUserSelfResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserSelfResponse$ {
  /** @deprecated use `GetUserSelfResponse$inboundSchema` instead. */
  export const inboundSchema = GetUserSelfResponse$inboundSchema;
  /** @deprecated use `GetUserSelfResponse$outboundSchema` instead. */
  export const outboundSchema = GetUserSelfResponse$outboundSchema;
  /** @deprecated use `GetUserSelfResponse$Outbound` instead. */
  export type Outbound = GetUserSelfResponse$Outbound;
}

export function getUserSelfResponseToJSON(
  getUserSelfResponse: GetUserSelfResponse,
): string {
  return JSON.stringify(
    GetUserSelfResponse$outboundSchema.parse(getUserSelfResponse),
  );
}

export function getUserSelfResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetUserSelfResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserSelfResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserSelfResponse' from JSON`,
  );
}
