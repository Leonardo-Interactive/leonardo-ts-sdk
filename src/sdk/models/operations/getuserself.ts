/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * columns and relationships of "users"
 */
export class Users extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "username" })
    username?: string;
}

/**
 * columns and relationships of "user_details"
 */
export class UserDetails extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "apiConcurrencySlots" })
    apiConcurrencySlots?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "subscriptionGptTokens" })
    subscriptionGptTokens?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "subscriptionModelTokens" })
    subscriptionModelTokens?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "subscriptionTokens" })
    subscriptionTokens?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "tokenRenewalDate" })
    tokenRenewalDate?: string;

    /**
     * columns and relationships of "users"
     */
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => Users)
    user?: Users;
}

/**
 * Responses for GET /me
 */
export class GetUserSelfResponseBody extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: UserDetails })
    @Expose({ name: "user_details" })
    @Type(() => UserDetails)
    userDetails?: UserDetails[];
}

export class GetUserSelfResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * Responses for GET /me
     */
    @SpeakeasyMetadata()
    object?: GetUserSelfResponseBody;
}
