/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * columns and relationships of "users"
 */
export type Users = {
    id?: string | null | undefined;
    username?: string | null | undefined;
};

/**
 * columns and relationships of "user_details"
 */
export type UserDetails = {
    apiConcurrencySlots?: number | undefined;
    subscriptionGptTokens?: number | undefined;
    subscriptionModelTokens?: number | undefined;
    subscriptionTokens?: number | undefined;
    tokenRenewalDate?: string | null | undefined;
    /**
     * columns and relationships of "users"
     */
    user?: Users | null | undefined;
};

/**
 * Responses for GET /me
 */
export type GetUserSelfResponseBody = {
    userDetails?: Array<UserDetails> | undefined;
};

export type GetUserSelfResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for GET /me
     */
    object?: GetUserSelfResponseBody | undefined;
};

/** @internal */
export namespace Users$ {
    export type Inbound = {
        id?: string | null | undefined;
        username?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Users, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.nullable(z.string()).optional(),
            username: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.username === undefined ? null : { username: v.username }),
            };
        });

    export type Outbound = {
        id?: string | null | undefined;
        username?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Users> = z
        .object({
            id: z.nullable(z.string()).optional(),
            username: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.username === undefined ? null : { username: v.username }),
            };
        });
}

/** @internal */
export namespace UserDetails$ {
    export type Inbound = {
        apiConcurrencySlots?: number | undefined;
        subscriptionGptTokens?: number | undefined;
        subscriptionModelTokens?: number | undefined;
        subscriptionTokens?: number | undefined;
        tokenRenewalDate?: string | null | undefined;
        user?: Users$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<UserDetails, z.ZodTypeDef, Inbound> = z
        .object({
            apiConcurrencySlots: z.number().int().optional(),
            subscriptionGptTokens: z.number().int().optional(),
            subscriptionModelTokens: z.number().int().optional(),
            subscriptionTokens: z.number().int().optional(),
            tokenRenewalDate: z.nullable(z.string()).optional(),
            user: z.nullable(z.lazy(() => Users$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiConcurrencySlots === undefined
                    ? null
                    : { apiConcurrencySlots: v.apiConcurrencySlots }),
                ...(v.subscriptionGptTokens === undefined
                    ? null
                    : { subscriptionGptTokens: v.subscriptionGptTokens }),
                ...(v.subscriptionModelTokens === undefined
                    ? null
                    : { subscriptionModelTokens: v.subscriptionModelTokens }),
                ...(v.subscriptionTokens === undefined
                    ? null
                    : { subscriptionTokens: v.subscriptionTokens }),
                ...(v.tokenRenewalDate === undefined
                    ? null
                    : { tokenRenewalDate: v.tokenRenewalDate }),
                ...(v.user === undefined ? null : { user: v.user }),
            };
        });

    export type Outbound = {
        apiConcurrencySlots?: number | undefined;
        subscriptionGptTokens?: number | undefined;
        subscriptionModelTokens?: number | undefined;
        subscriptionTokens?: number | undefined;
        tokenRenewalDate?: string | null | undefined;
        user?: Users$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UserDetails> = z
        .object({
            apiConcurrencySlots: z.number().int().optional(),
            subscriptionGptTokens: z.number().int().optional(),
            subscriptionModelTokens: z.number().int().optional(),
            subscriptionTokens: z.number().int().optional(),
            tokenRenewalDate: z.nullable(z.string()).optional(),
            user: z.nullable(z.lazy(() => Users$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiConcurrencySlots === undefined
                    ? null
                    : { apiConcurrencySlots: v.apiConcurrencySlots }),
                ...(v.subscriptionGptTokens === undefined
                    ? null
                    : { subscriptionGptTokens: v.subscriptionGptTokens }),
                ...(v.subscriptionModelTokens === undefined
                    ? null
                    : { subscriptionModelTokens: v.subscriptionModelTokens }),
                ...(v.subscriptionTokens === undefined
                    ? null
                    : { subscriptionTokens: v.subscriptionTokens }),
                ...(v.tokenRenewalDate === undefined
                    ? null
                    : { tokenRenewalDate: v.tokenRenewalDate }),
                ...(v.user === undefined ? null : { user: v.user }),
            };
        });
}

/** @internal */
export namespace GetUserSelfResponseBody$ {
    export type Inbound = {
        user_details?: Array<UserDetails$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetUserSelfResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            user_details: z.array(z.lazy(() => UserDetails$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.user_details === undefined ? null : { userDetails: v.user_details }),
            };
        });

    export type Outbound = {
        user_details?: Array<UserDetails$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetUserSelfResponseBody> = z
        .object({
            userDetails: z.array(z.lazy(() => UserDetails$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.userDetails === undefined ? null : { user_details: v.userDetails }),
            };
        });
}

/** @internal */
export namespace GetUserSelfResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetUserSelfResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetUserSelfResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetUserSelfResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetUserSelfResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetUserSelfResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetUserSelfResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
