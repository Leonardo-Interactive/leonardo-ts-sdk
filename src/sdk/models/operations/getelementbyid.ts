/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetElementByIdRequest = {
  /**
   * The ID of the custom element to return.
   */
  id: number;
};

/**
 * columns and relationships of "user_loras".
 */
export type GetElementByIdUserLoras = {
  baseModel?: string | undefined;
  createdAt?: string | undefined;
  description?: string | undefined;
  focus?: string | undefined;
  id?: number | undefined;
  instancePrompt?: string | null | undefined;
  learningRate?: number | undefined;
  name?: string | undefined;
  resolution?: number | undefined;
  /**
   * The status of the current task.
   */
  status?: shared.JobStatus | undefined;
  trainTextEncoder?: boolean | undefined;
  trainingEpoch?: number | undefined;
  updatedAt?: string | undefined;
};

/**
 * Responses for GET /elements/{id}.
 */
export type GetElementByIdResponseBody = {
  /**
   * columns and relationships of "user_loras".
   */
  userLorasByPk?: GetElementByIdUserLoras | null | undefined;
};

export type GetElementByIdResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for GET /elements/{id}.
   */
  object?: GetElementByIdResponseBody | undefined;
};

/** @internal */
export const GetElementByIdRequest$inboundSchema: z.ZodType<
  GetElementByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
});

/** @internal */
export type GetElementByIdRequest$Outbound = {
  id: number;
};

/** @internal */
export const GetElementByIdRequest$outboundSchema: z.ZodType<
  GetElementByIdRequest$Outbound,
  z.ZodTypeDef,
  GetElementByIdRequest
> = z.object({
  id: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetElementByIdRequest$ {
  /** @deprecated use `GetElementByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetElementByIdRequest$inboundSchema;
  /** @deprecated use `GetElementByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetElementByIdRequest$outboundSchema;
  /** @deprecated use `GetElementByIdRequest$Outbound` instead. */
  export type Outbound = GetElementByIdRequest$Outbound;
}

export function getElementByIdRequestToJSON(
  getElementByIdRequest: GetElementByIdRequest,
): string {
  return JSON.stringify(
    GetElementByIdRequest$outboundSchema.parse(getElementByIdRequest),
  );
}

export function getElementByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetElementByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetElementByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetElementByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetElementByIdUserLoras$inboundSchema: z.ZodType<
  GetElementByIdUserLoras,
  z.ZodTypeDef,
  unknown
> = z.object({
  baseModel: z.string().optional(),
  createdAt: z.string().optional(),
  description: z.string().optional(),
  focus: z.string().optional(),
  id: z.number().int().optional(),
  instancePrompt: z.nullable(z.string()).optional(),
  learningRate: z.number().optional(),
  name: z.string().optional(),
  resolution: z.number().int().optional(),
  status: shared.JobStatus$inboundSchema.optional(),
  trainTextEncoder: z.boolean().optional(),
  trainingEpoch: z.number().int().optional(),
  updatedAt: z.string().optional(),
});

/** @internal */
export type GetElementByIdUserLoras$Outbound = {
  baseModel?: string | undefined;
  createdAt?: string | undefined;
  description?: string | undefined;
  focus?: string | undefined;
  id?: number | undefined;
  instancePrompt?: string | null | undefined;
  learningRate?: number | undefined;
  name?: string | undefined;
  resolution?: number | undefined;
  status?: string | undefined;
  trainTextEncoder?: boolean | undefined;
  trainingEpoch?: number | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetElementByIdUserLoras$outboundSchema: z.ZodType<
  GetElementByIdUserLoras$Outbound,
  z.ZodTypeDef,
  GetElementByIdUserLoras
> = z.object({
  baseModel: z.string().optional(),
  createdAt: z.string().optional(),
  description: z.string().optional(),
  focus: z.string().optional(),
  id: z.number().int().optional(),
  instancePrompt: z.nullable(z.string()).optional(),
  learningRate: z.number().optional(),
  name: z.string().optional(),
  resolution: z.number().int().optional(),
  status: shared.JobStatus$outboundSchema.optional(),
  trainTextEncoder: z.boolean().optional(),
  trainingEpoch: z.number().int().optional(),
  updatedAt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetElementByIdUserLoras$ {
  /** @deprecated use `GetElementByIdUserLoras$inboundSchema` instead. */
  export const inboundSchema = GetElementByIdUserLoras$inboundSchema;
  /** @deprecated use `GetElementByIdUserLoras$outboundSchema` instead. */
  export const outboundSchema = GetElementByIdUserLoras$outboundSchema;
  /** @deprecated use `GetElementByIdUserLoras$Outbound` instead. */
  export type Outbound = GetElementByIdUserLoras$Outbound;
}

export function getElementByIdUserLorasToJSON(
  getElementByIdUserLoras: GetElementByIdUserLoras,
): string {
  return JSON.stringify(
    GetElementByIdUserLoras$outboundSchema.parse(getElementByIdUserLoras),
  );
}

export function getElementByIdUserLorasFromJSON(
  jsonString: string,
): SafeParseResult<GetElementByIdUserLoras, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetElementByIdUserLoras$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetElementByIdUserLoras' from JSON`,
  );
}

/** @internal */
export const GetElementByIdResponseBody$inboundSchema: z.ZodType<
  GetElementByIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_loras_by_pk: z.nullable(
    z.lazy(() => GetElementByIdUserLoras$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_loras_by_pk": "userLorasByPk",
  });
});

/** @internal */
export type GetElementByIdResponseBody$Outbound = {
  user_loras_by_pk?: GetElementByIdUserLoras$Outbound | null | undefined;
};

/** @internal */
export const GetElementByIdResponseBody$outboundSchema: z.ZodType<
  GetElementByIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetElementByIdResponseBody
> = z.object({
  userLorasByPk: z.nullable(
    z.lazy(() => GetElementByIdUserLoras$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    userLorasByPk: "user_loras_by_pk",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetElementByIdResponseBody$ {
  /** @deprecated use `GetElementByIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetElementByIdResponseBody$inboundSchema;
  /** @deprecated use `GetElementByIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetElementByIdResponseBody$outboundSchema;
  /** @deprecated use `GetElementByIdResponseBody$Outbound` instead. */
  export type Outbound = GetElementByIdResponseBody$Outbound;
}

export function getElementByIdResponseBodyToJSON(
  getElementByIdResponseBody: GetElementByIdResponseBody,
): string {
  return JSON.stringify(
    GetElementByIdResponseBody$outboundSchema.parse(getElementByIdResponseBody),
  );
}

export function getElementByIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetElementByIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetElementByIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetElementByIdResponseBody' from JSON`,
  );
}

/** @internal */
export const GetElementByIdResponse$inboundSchema: z.ZodType<
  GetElementByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => GetElementByIdResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetElementByIdResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: GetElementByIdResponseBody$Outbound | undefined;
};

/** @internal */
export const GetElementByIdResponse$outboundSchema: z.ZodType<
  GetElementByIdResponse$Outbound,
  z.ZodTypeDef,
  GetElementByIdResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => GetElementByIdResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetElementByIdResponse$ {
  /** @deprecated use `GetElementByIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetElementByIdResponse$inboundSchema;
  /** @deprecated use `GetElementByIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetElementByIdResponse$outboundSchema;
  /** @deprecated use `GetElementByIdResponse$Outbound` instead. */
  export type Outbound = GetElementByIdResponse$Outbound;
}

export function getElementByIdResponseToJSON(
  getElementByIdResponse: GetElementByIdResponse,
): string {
  return JSON.stringify(
    GetElementByIdResponse$outboundSchema.parse(getElementByIdResponse),
  );
}

export function getElementByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetElementByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetElementByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetElementByIdResponse' from JSON`,
  );
}
