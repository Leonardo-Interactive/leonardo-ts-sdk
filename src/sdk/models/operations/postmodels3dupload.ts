/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Query parameters can also be provided in the request body as a JSON object
 */
export type PostModels3dUploadRequestBody = {
    modelExtension?: string | undefined;
    name?: string | null | undefined;
};

export type ModelAssetUploadOutput = {
    modelFields?: string | null | undefined;
    modelId?: string | null | undefined;
    modelKey?: string | null | undefined;
    modelUrl?: string | null | undefined;
};

/**
 * Responses for POST /api/rest/v1/models-3d/upload
 */
export type PostModels3dUploadResponseBody = {
    uploadModelAsset?: ModelAssetUploadOutput | null | undefined;
};

export type PostModels3dUploadResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /api/rest/v1/models-3d/upload
     */
    object?: PostModels3dUploadResponseBody | undefined;
};

/** @internal */
export namespace PostModels3dUploadRequestBody$ {
    export type Inbound = {
        modelExtension?: string | undefined;
        name?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<PostModels3dUploadRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            modelExtension: z.string().optional(),
            name: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.modelExtension === undefined ? null : { modelExtension: v.modelExtension }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        modelExtension?: string | undefined;
        name?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostModels3dUploadRequestBody> =
        z
            .object({
                modelExtension: z.string().optional(),
                name: z.nullable(z.string()).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.modelExtension === undefined
                        ? null
                        : { modelExtension: v.modelExtension }),
                    ...(v.name === undefined ? null : { name: v.name }),
                };
            });
}

/** @internal */
export namespace ModelAssetUploadOutput$ {
    export type Inbound = {
        modelFields?: string | null | undefined;
        modelId?: string | null | undefined;
        modelKey?: string | null | undefined;
        modelUrl?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<ModelAssetUploadOutput, z.ZodTypeDef, Inbound> = z
        .object({
            modelFields: z.nullable(z.string()).optional(),
            modelId: z.nullable(z.string()).optional(),
            modelKey: z.nullable(z.string()).optional(),
            modelUrl: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.modelFields === undefined ? null : { modelFields: v.modelFields }),
                ...(v.modelId === undefined ? null : { modelId: v.modelId }),
                ...(v.modelKey === undefined ? null : { modelKey: v.modelKey }),
                ...(v.modelUrl === undefined ? null : { modelUrl: v.modelUrl }),
            };
        });

    export type Outbound = {
        modelFields?: string | null | undefined;
        modelId?: string | null | undefined;
        modelKey?: string | null | undefined;
        modelUrl?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ModelAssetUploadOutput> = z
        .object({
            modelFields: z.nullable(z.string()).optional(),
            modelId: z.nullable(z.string()).optional(),
            modelKey: z.nullable(z.string()).optional(),
            modelUrl: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.modelFields === undefined ? null : { modelFields: v.modelFields }),
                ...(v.modelId === undefined ? null : { modelId: v.modelId }),
                ...(v.modelKey === undefined ? null : { modelKey: v.modelKey }),
                ...(v.modelUrl === undefined ? null : { modelUrl: v.modelUrl }),
            };
        });
}

/** @internal */
export namespace PostModels3dUploadResponseBody$ {
    export type Inbound = {
        uploadModelAsset?: ModelAssetUploadOutput$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<PostModels3dUploadResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            uploadModelAsset: z
                .nullable(z.lazy(() => ModelAssetUploadOutput$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.uploadModelAsset === undefined
                    ? null
                    : { uploadModelAsset: v.uploadModelAsset }),
            };
        });

    export type Outbound = {
        uploadModelAsset?: ModelAssetUploadOutput$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostModels3dUploadResponseBody> =
        z
            .object({
                uploadModelAsset: z
                    .nullable(z.lazy(() => ModelAssetUploadOutput$.outboundSchema))
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.uploadModelAsset === undefined
                        ? null
                        : { uploadModelAsset: v.uploadModelAsset }),
                };
            });
}

/** @internal */
export namespace PostModels3dUploadResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PostModels3dUploadResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostModels3dUploadResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PostModels3dUploadResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PostModels3dUploadResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostModels3dUploadResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PostModels3dUploadResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
