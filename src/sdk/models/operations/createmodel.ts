/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

/**
 * Query parameters to be provided in the request body as a JSON object
 */
export type CreateModelRequestBody = {
    /**
     * The ID of the dataset to train the model on.
     */
    datasetId: string;
    /**
     * The description of the model.
     */
    description?: string | null | undefined;
    /**
     * The instance prompt to use during training.
     */
    instancePrompt: string;
    /**
     * The category the most accurately reflects the model.
     */
    modelType?: shared.CustomModelType | undefined;
    /**
     * The name of the model.
     */
    name: string;
    /**
     * Whether or not the model is NSFW.
     */
    nsfw?: boolean | null | undefined;
    /**
     * The resolution for training. Must be 512 or 768.
     */
    resolution?: number | null | undefined;
    /**
     * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5.
     */
    sdVersion?: shared.SdVersions | undefined;
    /**
     * When training using the PIXEL_ART model type, this influences the training strength.
     */
    strength?: shared.Strength | undefined;
};

export type SDTrainingOutput = {
    /**
     * API Credits Cost for Model Training. Available for Production API Users.
     */
    apiCreditCost?: number | null | undefined;
    customModelId?: string | undefined;
};

/**
 * Responses for POST /models
 */
export type CreateModelResponseBody = {
    sdTrainingJob?: SDTrainingOutput | null | undefined;
};

export type CreateModelResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /models
     */
    object?: CreateModelResponseBody | undefined;
};

/** @internal */
export namespace CreateModelRequestBody$ {
    export type Inbound = {
        datasetId: string;
        description?: string | null | undefined;
        instance_prompt: string;
        modelType?: shared.CustomModelType | undefined;
        name: string;
        nsfw?: boolean | null | undefined;
        resolution?: number | null | undefined;
        sd_Version?: shared.SdVersions | undefined;
        strength?: shared.Strength | undefined;
    };

    export const inboundSchema: z.ZodType<CreateModelRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            datasetId: z.string(),
            description: z.nullable(z.string().default("")),
            instance_prompt: z.string(),
            modelType: shared.CustomModelType$.default(shared.CustomModelType.General),
            name: z.string(),
            nsfw: z.nullable(z.boolean().default(false)),
            resolution: z.nullable(z.number().int().default(512)),
            sd_Version: shared.SdVersions$.optional(),
            strength: shared.Strength$.default(shared.Strength.Medium),
        })
        .transform((v) => {
            return {
                datasetId: v.datasetId,
                description: v.description,
                instancePrompt: v.instance_prompt,
                modelType: v.modelType,
                name: v.name,
                nsfw: v.nsfw,
                resolution: v.resolution,
                ...(v.sd_Version === undefined ? null : { sdVersion: v.sd_Version }),
                strength: v.strength,
            };
        });

    export type Outbound = {
        datasetId: string;
        description: string | null;
        instance_prompt: string;
        modelType: shared.CustomModelType;
        name: string;
        nsfw: boolean | null;
        resolution: number | null;
        sd_Version?: shared.SdVersions | undefined;
        strength: shared.Strength;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateModelRequestBody> = z
        .object({
            datasetId: z.string(),
            description: z.nullable(z.string().default("")),
            instancePrompt: z.string(),
            modelType: shared.CustomModelType$.default(shared.CustomModelType.General),
            name: z.string(),
            nsfw: z.nullable(z.boolean().default(false)),
            resolution: z.nullable(z.number().int().default(512)),
            sdVersion: shared.SdVersions$.optional(),
            strength: shared.Strength$.default(shared.Strength.Medium),
        })
        .transform((v) => {
            return {
                datasetId: v.datasetId,
                description: v.description,
                instance_prompt: v.instancePrompt,
                modelType: v.modelType,
                name: v.name,
                nsfw: v.nsfw,
                resolution: v.resolution,
                ...(v.sdVersion === undefined ? null : { sd_Version: v.sdVersion }),
                strength: v.strength,
            };
        });
}

/** @internal */
export namespace SDTrainingOutput$ {
    export type Inbound = {
        apiCreditCost?: number | null | undefined;
        customModelId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SDTrainingOutput, z.ZodTypeDef, Inbound> = z
        .object({
            apiCreditCost: z.nullable(z.number().int()).optional(),
            customModelId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiCreditCost === undefined ? null : { apiCreditCost: v.apiCreditCost }),
                ...(v.customModelId === undefined ? null : { customModelId: v.customModelId }),
            };
        });

    export type Outbound = {
        apiCreditCost?: number | null | undefined;
        customModelId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SDTrainingOutput> = z
        .object({
            apiCreditCost: z.nullable(z.number().int()).optional(),
            customModelId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiCreditCost === undefined ? null : { apiCreditCost: v.apiCreditCost }),
                ...(v.customModelId === undefined ? null : { customModelId: v.customModelId }),
            };
        });
}

/** @internal */
export namespace CreateModelResponseBody$ {
    export type Inbound = {
        sdTrainingJob?: SDTrainingOutput$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<CreateModelResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            sdTrainingJob: z.nullable(z.lazy(() => SDTrainingOutput$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sdTrainingJob === undefined ? null : { sdTrainingJob: v.sdTrainingJob }),
            };
        });

    export type Outbound = {
        sdTrainingJob?: SDTrainingOutput$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateModelResponseBody> = z
        .object({
            sdTrainingJob: z.nullable(z.lazy(() => SDTrainingOutput$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sdTrainingJob === undefined ? null : { sdTrainingJob: v.sdTrainingJob }),
            };
        });
}

/** @internal */
export namespace CreateModelResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: CreateModelResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateModelResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => CreateModelResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: CreateModelResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateModelResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => CreateModelResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
