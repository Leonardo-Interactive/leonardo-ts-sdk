/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteInitImageByIdRequest = {
  /**
   * _"id" is required_
   */
  id: string;
};

/**
 * columns and relationships of "init_images"
 */
export type InitImages = {
  id?: string | null | undefined;
};

/**
 * Responses for DELETE /init-image/{id}
 */
export type DeleteInitImageByIdResponseBody = {
  /**
   * columns and relationships of "init_images"
   */
  deleteInitImagesByPk?: InitImages | null | undefined;
};

export type DeleteInitImageByIdResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for DELETE /init-image/{id}
   */
  object?: DeleteInitImageByIdResponseBody | undefined;
};

/** @internal */
export const DeleteInitImageByIdRequest$inboundSchema: z.ZodType<
  DeleteInitImageByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteInitImageByIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteInitImageByIdRequest$outboundSchema: z.ZodType<
  DeleteInitImageByIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteInitImageByIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteInitImageByIdRequest$ {
  /** @deprecated use `DeleteInitImageByIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteInitImageByIdRequest$inboundSchema;
  /** @deprecated use `DeleteInitImageByIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteInitImageByIdRequest$outboundSchema;
  /** @deprecated use `DeleteInitImageByIdRequest$Outbound` instead. */
  export type Outbound = DeleteInitImageByIdRequest$Outbound;
}

export function deleteInitImageByIdRequestToJSON(
  deleteInitImageByIdRequest: DeleteInitImageByIdRequest,
): string {
  return JSON.stringify(
    DeleteInitImageByIdRequest$outboundSchema.parse(deleteInitImageByIdRequest),
  );
}

export function deleteInitImageByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteInitImageByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteInitImageByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteInitImageByIdRequest' from JSON`,
  );
}

/** @internal */
export const InitImages$inboundSchema: z.ZodType<
  InitImages,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type InitImages$Outbound = {
  id?: string | null | undefined;
};

/** @internal */
export const InitImages$outboundSchema: z.ZodType<
  InitImages$Outbound,
  z.ZodTypeDef,
  InitImages
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitImages$ {
  /** @deprecated use `InitImages$inboundSchema` instead. */
  export const inboundSchema = InitImages$inboundSchema;
  /** @deprecated use `InitImages$outboundSchema` instead. */
  export const outboundSchema = InitImages$outboundSchema;
  /** @deprecated use `InitImages$Outbound` instead. */
  export type Outbound = InitImages$Outbound;
}

export function initImagesToJSON(initImages: InitImages): string {
  return JSON.stringify(InitImages$outboundSchema.parse(initImages));
}

export function initImagesFromJSON(
  jsonString: string,
): SafeParseResult<InitImages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitImages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitImages' from JSON`,
  );
}

/** @internal */
export const DeleteInitImageByIdResponseBody$inboundSchema: z.ZodType<
  DeleteInitImageByIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  delete_init_images_by_pk: z.nullable(z.lazy(() => InitImages$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "delete_init_images_by_pk": "deleteInitImagesByPk",
  });
});

/** @internal */
export type DeleteInitImageByIdResponseBody$Outbound = {
  delete_init_images_by_pk?: InitImages$Outbound | null | undefined;
};

/** @internal */
export const DeleteInitImageByIdResponseBody$outboundSchema: z.ZodType<
  DeleteInitImageByIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteInitImageByIdResponseBody
> = z.object({
  deleteInitImagesByPk: z.nullable(z.lazy(() => InitImages$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    deleteInitImagesByPk: "delete_init_images_by_pk",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteInitImageByIdResponseBody$ {
  /** @deprecated use `DeleteInitImageByIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteInitImageByIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteInitImageByIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteInitImageByIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteInitImageByIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteInitImageByIdResponseBody$Outbound;
}

export function deleteInitImageByIdResponseBodyToJSON(
  deleteInitImageByIdResponseBody: DeleteInitImageByIdResponseBody,
): string {
  return JSON.stringify(
    DeleteInitImageByIdResponseBody$outboundSchema.parse(
      deleteInitImageByIdResponseBody,
    ),
  );
}

export function deleteInitImageByIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteInitImageByIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteInitImageByIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteInitImageByIdResponseBody' from JSON`,
  );
}

/** @internal */
export const DeleteInitImageByIdResponse$inboundSchema: z.ZodType<
  DeleteInitImageByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => DeleteInitImageByIdResponseBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DeleteInitImageByIdResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: DeleteInitImageByIdResponseBody$Outbound | undefined;
};

/** @internal */
export const DeleteInitImageByIdResponse$outboundSchema: z.ZodType<
  DeleteInitImageByIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteInitImageByIdResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => DeleteInitImageByIdResponseBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteInitImageByIdResponse$ {
  /** @deprecated use `DeleteInitImageByIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteInitImageByIdResponse$inboundSchema;
  /** @deprecated use `DeleteInitImageByIdResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteInitImageByIdResponse$outboundSchema;
  /** @deprecated use `DeleteInitImageByIdResponse$Outbound` instead. */
  export type Outbound = DeleteInitImageByIdResponse$Outbound;
}

export function deleteInitImageByIdResponseToJSON(
  deleteInitImageByIdResponse: DeleteInitImageByIdResponse,
): string {
  return JSON.stringify(
    DeleteInitImageByIdResponse$outboundSchema.parse(
      deleteInitImageByIdResponse,
    ),
  );
}

export function deleteInitImageByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteInitImageByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteInitImageByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteInitImageByIdResponse' from JSON`,
  );
}
