/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

/**
 * Query parameters can also be provided in the request body as a JSON object
 */
export type UploadModelAssetRequestBody = {
    modelExtension?: string | undefined;
    name?: string | null | undefined;
};

export type ModelAssetUploadOutput = {
    modelFields?: string | null | undefined;
    modelId?: string | null | undefined;
    modelKey?: string | null | undefined;
    modelUrl?: string | null | undefined;
};

/**
 * Responses for POST /api/rest/v1/models-3d/upload
 */
export type UploadModelAssetResponseBody = {
    uploadModelAsset?: ModelAssetUploadOutput | null | undefined;
};

export type UploadModelAssetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /api/rest/v1/models-3d/upload
     */
    object?: UploadModelAssetResponseBody | undefined;
};

/** @internal */
export namespace UploadModelAssetRequestBody$ {
    export const inboundSchema: z.ZodType<UploadModelAssetRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            modelExtension: z.string().optional(),
            name: z.nullable(z.string()).optional(),
        });

    export type Outbound = {
        modelExtension?: string | undefined;
        name?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadModelAssetRequestBody> =
        z.object({
            modelExtension: z.string().optional(),
            name: z.nullable(z.string()).optional(),
        });
}

/** @internal */
export namespace ModelAssetUploadOutput$ {
    export const inboundSchema: z.ZodType<ModelAssetUploadOutput, z.ZodTypeDef, unknown> = z.object(
        {
            modelFields: z.nullable(z.string()).optional(),
            modelId: z.nullable(z.string()).optional(),
            modelKey: z.nullable(z.string()).optional(),
            modelUrl: z.nullable(z.string()).optional(),
        }
    );

    export type Outbound = {
        modelFields?: string | null | undefined;
        modelId?: string | null | undefined;
        modelKey?: string | null | undefined;
        modelUrl?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ModelAssetUploadOutput> =
        z.object({
            modelFields: z.nullable(z.string()).optional(),
            modelId: z.nullable(z.string()).optional(),
            modelKey: z.nullable(z.string()).optional(),
            modelUrl: z.nullable(z.string()).optional(),
        });
}

/** @internal */
export namespace UploadModelAssetResponseBody$ {
    export const inboundSchema: z.ZodType<UploadModelAssetResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            uploadModelAsset: z
                .nullable(z.lazy(() => ModelAssetUploadOutput$.inboundSchema))
                .optional(),
        });

    export type Outbound = {
        uploadModelAsset?: ModelAssetUploadOutput$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadModelAssetResponseBody> =
        z.object({
            uploadModelAsset: z
                .nullable(z.lazy(() => ModelAssetUploadOutput$.outboundSchema))
                .optional(),
        });
}

/** @internal */
export namespace UploadModelAssetResponse$ {
    export const inboundSchema: z.ZodType<UploadModelAssetResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => UploadModelAssetResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: UploadModelAssetResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadModelAssetResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => UploadModelAssetResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
