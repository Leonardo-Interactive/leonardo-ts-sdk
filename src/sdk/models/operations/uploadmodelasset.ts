/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Query parameters can also be provided in the request body as a JSON object
 */
export type UploadModelAssetRequestBody = {
  modelExtension?: string | undefined;
  name?: string | null | undefined;
};

export type ModelAssetUploadOutput = {
  modelFields?: string | null | undefined;
  modelId?: string | null | undefined;
  modelKey?: string | null | undefined;
  modelUrl?: string | null | undefined;
};

/**
 * Responses for POST /api/rest/v1/models-3d/upload
 */
export type UploadModelAssetResponseBody = {
  uploadModelAsset?: ModelAssetUploadOutput | null | undefined;
};

export type UploadModelAssetResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for POST /api/rest/v1/models-3d/upload
   */
  object?: UploadModelAssetResponseBody | undefined;
};

/** @internal */
export const UploadModelAssetRequestBody$inboundSchema: z.ZodType<
  UploadModelAssetRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  modelExtension: z.string().optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type UploadModelAssetRequestBody$Outbound = {
  modelExtension?: string | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const UploadModelAssetRequestBody$outboundSchema: z.ZodType<
  UploadModelAssetRequestBody$Outbound,
  z.ZodTypeDef,
  UploadModelAssetRequestBody
> = z.object({
  modelExtension: z.string().optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadModelAssetRequestBody$ {
  /** @deprecated use `UploadModelAssetRequestBody$inboundSchema` instead. */
  export const inboundSchema = UploadModelAssetRequestBody$inboundSchema;
  /** @deprecated use `UploadModelAssetRequestBody$outboundSchema` instead. */
  export const outboundSchema = UploadModelAssetRequestBody$outboundSchema;
  /** @deprecated use `UploadModelAssetRequestBody$Outbound` instead. */
  export type Outbound = UploadModelAssetRequestBody$Outbound;
}

export function uploadModelAssetRequestBodyToJSON(
  uploadModelAssetRequestBody: UploadModelAssetRequestBody,
): string {
  return JSON.stringify(
    UploadModelAssetRequestBody$outboundSchema.parse(
      uploadModelAssetRequestBody,
    ),
  );
}

export function uploadModelAssetRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadModelAssetRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadModelAssetRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadModelAssetRequestBody' from JSON`,
  );
}

/** @internal */
export const ModelAssetUploadOutput$inboundSchema: z.ZodType<
  ModelAssetUploadOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  modelFields: z.nullable(z.string()).optional(),
  modelId: z.nullable(z.string()).optional(),
  modelKey: z.nullable(z.string()).optional(),
  modelUrl: z.nullable(z.string()).optional(),
});

/** @internal */
export type ModelAssetUploadOutput$Outbound = {
  modelFields?: string | null | undefined;
  modelId?: string | null | undefined;
  modelKey?: string | null | undefined;
  modelUrl?: string | null | undefined;
};

/** @internal */
export const ModelAssetUploadOutput$outboundSchema: z.ZodType<
  ModelAssetUploadOutput$Outbound,
  z.ZodTypeDef,
  ModelAssetUploadOutput
> = z.object({
  modelFields: z.nullable(z.string()).optional(),
  modelId: z.nullable(z.string()).optional(),
  modelKey: z.nullable(z.string()).optional(),
  modelUrl: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelAssetUploadOutput$ {
  /** @deprecated use `ModelAssetUploadOutput$inboundSchema` instead. */
  export const inboundSchema = ModelAssetUploadOutput$inboundSchema;
  /** @deprecated use `ModelAssetUploadOutput$outboundSchema` instead. */
  export const outboundSchema = ModelAssetUploadOutput$outboundSchema;
  /** @deprecated use `ModelAssetUploadOutput$Outbound` instead. */
  export type Outbound = ModelAssetUploadOutput$Outbound;
}

export function modelAssetUploadOutputToJSON(
  modelAssetUploadOutput: ModelAssetUploadOutput,
): string {
  return JSON.stringify(
    ModelAssetUploadOutput$outboundSchema.parse(modelAssetUploadOutput),
  );
}

export function modelAssetUploadOutputFromJSON(
  jsonString: string,
): SafeParseResult<ModelAssetUploadOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelAssetUploadOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelAssetUploadOutput' from JSON`,
  );
}

/** @internal */
export const UploadModelAssetResponseBody$inboundSchema: z.ZodType<
  UploadModelAssetResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uploadModelAsset: z.nullable(
    z.lazy(() => ModelAssetUploadOutput$inboundSchema),
  ).optional(),
});

/** @internal */
export type UploadModelAssetResponseBody$Outbound = {
  uploadModelAsset?: ModelAssetUploadOutput$Outbound | null | undefined;
};

/** @internal */
export const UploadModelAssetResponseBody$outboundSchema: z.ZodType<
  UploadModelAssetResponseBody$Outbound,
  z.ZodTypeDef,
  UploadModelAssetResponseBody
> = z.object({
  uploadModelAsset: z.nullable(
    z.lazy(() => ModelAssetUploadOutput$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadModelAssetResponseBody$ {
  /** @deprecated use `UploadModelAssetResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadModelAssetResponseBody$inboundSchema;
  /** @deprecated use `UploadModelAssetResponseBody$outboundSchema` instead. */
  export const outboundSchema = UploadModelAssetResponseBody$outboundSchema;
  /** @deprecated use `UploadModelAssetResponseBody$Outbound` instead. */
  export type Outbound = UploadModelAssetResponseBody$Outbound;
}

export function uploadModelAssetResponseBodyToJSON(
  uploadModelAssetResponseBody: UploadModelAssetResponseBody,
): string {
  return JSON.stringify(
    UploadModelAssetResponseBody$outboundSchema.parse(
      uploadModelAssetResponseBody,
    ),
  );
}

export function uploadModelAssetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadModelAssetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadModelAssetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadModelAssetResponseBody' from JSON`,
  );
}

/** @internal */
export const UploadModelAssetResponse$inboundSchema: z.ZodType<
  UploadModelAssetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => UploadModelAssetResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type UploadModelAssetResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: UploadModelAssetResponseBody$Outbound | undefined;
};

/** @internal */
export const UploadModelAssetResponse$outboundSchema: z.ZodType<
  UploadModelAssetResponse$Outbound,
  z.ZodTypeDef,
  UploadModelAssetResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => UploadModelAssetResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadModelAssetResponse$ {
  /** @deprecated use `UploadModelAssetResponse$inboundSchema` instead. */
  export const inboundSchema = UploadModelAssetResponse$inboundSchema;
  /** @deprecated use `UploadModelAssetResponse$outboundSchema` instead. */
  export const outboundSchema = UploadModelAssetResponse$outboundSchema;
  /** @deprecated use `UploadModelAssetResponse$Outbound` instead. */
  export type Outbound = UploadModelAssetResponse$Outbound;
}

export function uploadModelAssetResponseToJSON(
  uploadModelAssetResponse: UploadModelAssetResponse,
): string {
  return JSON.stringify(
    UploadModelAssetResponse$outboundSchema.parse(uploadModelAssetResponse),
  );
}

export function uploadModelAssetResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadModelAssetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadModelAssetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadModelAssetResponse' from JSON`,
  );
}
