/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export type GetInitImageByIdRequest = {
    /**
     * _"id" is required_
     */
    id: string;
};

/**
 * columns and relationships of "init_images"
 */
export type GetInitImageByIdInitImages = {
    createdAt?: string | undefined;
    id?: string | null | undefined;
    url?: string | undefined;
};

/**
 * Responses for GET /init-image/{id}
 */
export type GetInitImageByIdResponseBody = {
    /**
     * columns and relationships of "init_images"
     */
    initImagesByPk?: GetInitImageByIdInitImages | null | undefined;
};

export type GetInitImageByIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for GET /init-image/{id}
     */
    object?: GetInitImageByIdResponseBody | undefined;
};

/** @internal */
export namespace GetInitImageByIdRequest$ {
    export const inboundSchema: z.ZodType<GetInitImageByIdRequest, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string(),
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetInitImageByIdRequest> =
        z.object({
            id: z.string(),
        });
}

/** @internal */
export namespace GetInitImageByIdInitImages$ {
    export const inboundSchema: z.ZodType<GetInitImageByIdInitImages, z.ZodTypeDef, unknown> =
        z.object({
            createdAt: z.string().optional(),
            id: z.nullable(z.string()).optional(),
            url: z.string().optional(),
        });

    export type Outbound = {
        createdAt?: string | undefined;
        id?: string | null | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetInitImageByIdInitImages> =
        z.object({
            createdAt: z.string().optional(),
            id: z.nullable(z.string()).optional(),
            url: z.string().optional(),
        });
}

/** @internal */
export namespace GetInitImageByIdResponseBody$ {
    export const inboundSchema: z.ZodType<GetInitImageByIdResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            init_images_by_pk: z
                .nullable(z.lazy(() => GetInitImageByIdInitImages$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                init_images_by_pk: "initImagesByPk",
            });
        });

    export type Outbound = {
        init_images_by_pk?: GetInitImageByIdInitImages$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetInitImageByIdResponseBody> = z
        .object({
            initImagesByPk: z
                .nullable(z.lazy(() => GetInitImageByIdInitImages$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                initImagesByPk: "init_images_by_pk",
            });
        });
}

/** @internal */
export namespace GetInitImageByIdResponse$ {
    export const inboundSchema: z.ZodType<GetInitImageByIdResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetInitImageByIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetInitImageByIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetInitImageByIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetInitImageByIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
