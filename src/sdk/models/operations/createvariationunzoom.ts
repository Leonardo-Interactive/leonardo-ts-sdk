/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Query parameters can also be provided in the request body as a JSON object
 */
export type CreateVariationUnzoomRequestBody = {
    id?: string | undefined;
    isVariation?: boolean | null | undefined;
};

export type SDUnzoomOutput = {
    /**
     * API Credits Cost for Unzoom Variation. Available for Production API Users.
     */
    apiCreditCost?: number | null | undefined;
    id?: string | undefined;
};

/**
 * Responses for POST /api/rest/v1/variations/unzoom
 */
export type CreateVariationUnzoomResponseBody = {
    sdUnzoomJob?: SDUnzoomOutput | null | undefined;
};

export type CreateVariationUnzoomResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /api/rest/v1/variations/unzoom
     */
    object?: CreateVariationUnzoomResponseBody | undefined;
};

/** @internal */
export namespace CreateVariationUnzoomRequestBody$ {
    export const inboundSchema: z.ZodType<CreateVariationUnzoomRequestBody, z.ZodTypeDef, unknown> =
        z
            .object({
                id: z.string().optional(),
                isVariation: z.nullable(z.boolean()).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.isVariation === undefined ? null : { isVariation: v.isVariation }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        isVariation?: boolean | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateVariationUnzoomRequestBody
    > = z
        .object({
            id: z.string().optional(),
            isVariation: z.nullable(z.boolean()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.isVariation === undefined ? null : { isVariation: v.isVariation }),
            };
        });
}

/** @internal */
export namespace SDUnzoomOutput$ {
    export const inboundSchema: z.ZodType<SDUnzoomOutput, z.ZodTypeDef, unknown> = z
        .object({
            apiCreditCost: z.nullable(z.number().int()).optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiCreditCost === undefined ? null : { apiCreditCost: v.apiCreditCost }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        apiCreditCost?: number | null | undefined;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SDUnzoomOutput> = z
        .object({
            apiCreditCost: z.nullable(z.number().int()).optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiCreditCost === undefined ? null : { apiCreditCost: v.apiCreditCost }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace CreateVariationUnzoomResponseBody$ {
    export const inboundSchema: z.ZodType<
        CreateVariationUnzoomResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            sdUnzoomJob: z.nullable(z.lazy(() => SDUnzoomOutput$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sdUnzoomJob === undefined ? null : { sdUnzoomJob: v.sdUnzoomJob }),
            };
        });

    export type Outbound = {
        sdUnzoomJob?: SDUnzoomOutput$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateVariationUnzoomResponseBody
    > = z
        .object({
            sdUnzoomJob: z.nullable(z.lazy(() => SDUnzoomOutput$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sdUnzoomJob === undefined ? null : { sdUnzoomJob: v.sdUnzoomJob }),
            };
        });
}

/** @internal */
export namespace CreateVariationUnzoomResponse$ {
    export const inboundSchema: z.ZodType<CreateVariationUnzoomResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => CreateVariationUnzoomResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: CreateVariationUnzoomResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateVariationUnzoomResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                object: z.lazy(() => CreateVariationUnzoomResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.object === undefined ? null : { object: v.object }),
                };
            });
}
