/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

/**
 * Query parameters provided in the request body as a JSON object
 */
export type UploadCanvasInitImageRequestBody = {
    /**
     * Has to be png, jpg, jpeg, or webp.
     */
    initExtension: string;
    /**
     * Has to be png, jpg, jpeg, or webp.
     */
    maskExtension: string;
};

export type CanvasInitImageUploadOutput = {
    initFields?: string | null | undefined;
    initImageId?: string | null | undefined;
    initKey?: string | null | undefined;
    initUrl?: string | null | undefined;
    maskFields?: string | null | undefined;
    maskImageId?: string | null | undefined;
    maskKey?: string | null | undefined;
    maskUrl?: string | null | undefined;
};

/**
 * Responses for POST /canvas-init-image
 */
export type UploadCanvasInitImageResponseBody = {
    uploadCanvasInitImage?: CanvasInitImageUploadOutput | null | undefined;
};

export type UploadCanvasInitImageResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /canvas-init-image
     */
    object?: UploadCanvasInitImageResponseBody | undefined;
};

/** @internal */
export namespace UploadCanvasInitImageRequestBody$ {
    export const inboundSchema: z.ZodType<UploadCanvasInitImageRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            initExtension: z.string(),
            maskExtension: z.string(),
        });

    export type Outbound = {
        initExtension: string;
        maskExtension: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UploadCanvasInitImageRequestBody
    > = z.object({
        initExtension: z.string(),
        maskExtension: z.string(),
    });
}

/** @internal */
export namespace CanvasInitImageUploadOutput$ {
    export const inboundSchema: z.ZodType<CanvasInitImageUploadOutput, z.ZodTypeDef, unknown> =
        z.object({
            initFields: z.nullable(z.string()).optional(),
            initImageId: z.nullable(z.string()).optional(),
            initKey: z.nullable(z.string()).optional(),
            initUrl: z.nullable(z.string()).optional(),
            maskFields: z.nullable(z.string()).optional(),
            maskImageId: z.nullable(z.string()).optional(),
            maskKey: z.nullable(z.string()).optional(),
            maskUrl: z.nullable(z.string()).optional(),
        });

    export type Outbound = {
        initFields?: string | null | undefined;
        initImageId?: string | null | undefined;
        initKey?: string | null | undefined;
        initUrl?: string | null | undefined;
        maskFields?: string | null | undefined;
        maskImageId?: string | null | undefined;
        maskKey?: string | null | undefined;
        maskUrl?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CanvasInitImageUploadOutput> =
        z.object({
            initFields: z.nullable(z.string()).optional(),
            initImageId: z.nullable(z.string()).optional(),
            initKey: z.nullable(z.string()).optional(),
            initUrl: z.nullable(z.string()).optional(),
            maskFields: z.nullable(z.string()).optional(),
            maskImageId: z.nullable(z.string()).optional(),
            maskKey: z.nullable(z.string()).optional(),
            maskUrl: z.nullable(z.string()).optional(),
        });
}

/** @internal */
export namespace UploadCanvasInitImageResponseBody$ {
    export const inboundSchema: z.ZodType<
        UploadCanvasInitImageResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        uploadCanvasInitImage: z
            .nullable(z.lazy(() => CanvasInitImageUploadOutput$.inboundSchema))
            .optional(),
    });

    export type Outbound = {
        uploadCanvasInitImage?: CanvasInitImageUploadOutput$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UploadCanvasInitImageResponseBody
    > = z.object({
        uploadCanvasInitImage: z
            .nullable(z.lazy(() => CanvasInitImageUploadOutput$.outboundSchema))
            .optional(),
    });
}

/** @internal */
export namespace UploadCanvasInitImageResponse$ {
    export const inboundSchema: z.ZodType<UploadCanvasInitImageResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => UploadCanvasInitImageResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: UploadCanvasInitImageResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadCanvasInitImageResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                object: z.lazy(() => UploadCanvasInitImageResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    contentType: "ContentType",
                    statusCode: "StatusCode",
                    rawResponse: "RawResponse",
                });
            });
}
