/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type GetVariationByIdRequest = {
    /**
     * "id" is required
     */
    id: string;
};

/**
 * columns and relationships of "generated_image_variation_generic"
 */
export type GeneratedImageVariationGeneric = {
    createdAt?: string | undefined;
    id?: string | null | undefined;
    /**
     * The status of the current task.
     */
    status?: shared.JobStatus | undefined;
    /**
     * The type of variation.
     */
    transformType?: shared.VariationType | undefined;
    url?: string | null | undefined;
};

/**
 * Responses for GET /variations/{id}
 */
export type GetVariationByIdResponseBody = {
    generatedImageVariationGeneric?: Array<GeneratedImageVariationGeneric> | undefined;
};

export type GetVariationByIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for GET /variations/{id}
     */
    object?: GetVariationByIdResponseBody | undefined;
};

/** @internal */
export namespace GetVariationByIdRequest$ {
    export const inboundSchema: z.ZodType<GetVariationByIdRequest, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetVariationByIdRequest> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export namespace GeneratedImageVariationGeneric$ {
    export const inboundSchema: z.ZodType<GeneratedImageVariationGeneric, z.ZodTypeDef, unknown> = z
        .object({
            createdAt: z.string().optional(),
            id: z.nullable(z.string()).optional(),
            status: shared.JobStatus$.inboundSchema.optional(),
            transformType: shared.VariationType$.inboundSchema.optional(),
            url: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.transformType === undefined ? null : { transformType: v.transformType }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        createdAt?: string | undefined;
        id?: string | null | undefined;
        status?: string | undefined;
        transformType?: string | undefined;
        url?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GeneratedImageVariationGeneric> =
        z
            .object({
                createdAt: z.string().optional(),
                id: z.nullable(z.string()).optional(),
                status: shared.JobStatus$.outboundSchema.optional(),
                transformType: shared.VariationType$.outboundSchema.optional(),
                url: z.nullable(z.string()).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.status === undefined ? null : { status: v.status }),
                    ...(v.transformType === undefined ? null : { transformType: v.transformType }),
                    ...(v.url === undefined ? null : { url: v.url }),
                };
            });
}

/** @internal */
export namespace GetVariationByIdResponseBody$ {
    export const inboundSchema: z.ZodType<GetVariationByIdResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            generated_image_variation_generic: z
                .array(z.lazy(() => GeneratedImageVariationGeneric$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.generated_image_variation_generic === undefined
                    ? null
                    : { generatedImageVariationGeneric: v.generated_image_variation_generic }),
            };
        });

    export type Outbound = {
        generated_image_variation_generic?:
            | Array<GeneratedImageVariationGeneric$.Outbound>
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetVariationByIdResponseBody> = z
        .object({
            generatedImageVariationGeneric: z
                .array(z.lazy(() => GeneratedImageVariationGeneric$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.generatedImageVariationGeneric === undefined
                    ? null
                    : { generated_image_variation_generic: v.generatedImageVariationGeneric }),
            };
        });
}

/** @internal */
export namespace GetVariationByIdResponse$ {
    export const inboundSchema: z.ZodType<GetVariationByIdResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetVariationByIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetVariationByIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetVariationByIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetVariationByIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
