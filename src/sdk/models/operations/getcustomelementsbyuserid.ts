/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetCustomElementsByUserIdRequest = {
  /**
   * The ID of the user to return.
   */
  userId: string;
};

/**
 * columns and relationships of "user_loras".
 */
export type GetCustomElementsByUserIdUserLoras = {
  baseModel?: string | undefined;
  createdAt?: string | undefined;
  description?: string | undefined;
  focus?: string | undefined;
  id?: number | undefined;
  instancePrompt?: string | null | undefined;
  learningRate?: number | undefined;
  name?: string | undefined;
  resolution?: number | undefined;
  /**
   * The status of the current task.
   */
  status?: shared.JobStatus | undefined;
  trainTextEncoder?: boolean | undefined;
  trainingEpoch?: number | undefined;
  updatedAt?: string | undefined;
};

/**
 * Responses for GET /elements/user/{userId}.
 */
export type GetCustomElementsByUserIdResponseBody = {
  userLoras?: Array<GetCustomElementsByUserIdUserLoras> | null | undefined;
};

export type GetCustomElementsByUserIdResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for GET /elements/user/{userId}.
   */
  object?: GetCustomElementsByUserIdResponseBody | undefined;
};

/** @internal */
export const GetCustomElementsByUserIdRequest$inboundSchema: z.ZodType<
  GetCustomElementsByUserIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  userId: z.string(),
});

/** @internal */
export type GetCustomElementsByUserIdRequest$Outbound = {
  userId: string;
};

/** @internal */
export const GetCustomElementsByUserIdRequest$outboundSchema: z.ZodType<
  GetCustomElementsByUserIdRequest$Outbound,
  z.ZodTypeDef,
  GetCustomElementsByUserIdRequest
> = z.object({
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomElementsByUserIdRequest$ {
  /** @deprecated use `GetCustomElementsByUserIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetCustomElementsByUserIdRequest$inboundSchema;
  /** @deprecated use `GetCustomElementsByUserIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetCustomElementsByUserIdRequest$outboundSchema;
  /** @deprecated use `GetCustomElementsByUserIdRequest$Outbound` instead. */
  export type Outbound = GetCustomElementsByUserIdRequest$Outbound;
}

export function getCustomElementsByUserIdRequestToJSON(
  getCustomElementsByUserIdRequest: GetCustomElementsByUserIdRequest,
): string {
  return JSON.stringify(
    GetCustomElementsByUserIdRequest$outboundSchema.parse(
      getCustomElementsByUserIdRequest,
    ),
  );
}

export function getCustomElementsByUserIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomElementsByUserIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomElementsByUserIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomElementsByUserIdRequest' from JSON`,
  );
}

/** @internal */
export const GetCustomElementsByUserIdUserLoras$inboundSchema: z.ZodType<
  GetCustomElementsByUserIdUserLoras,
  z.ZodTypeDef,
  unknown
> = z.object({
  baseModel: z.string().optional(),
  createdAt: z.string().optional(),
  description: z.string().optional(),
  focus: z.string().optional(),
  id: z.number().int().optional(),
  instancePrompt: z.nullable(z.string()).optional(),
  learningRate: z.number().optional(),
  name: z.string().optional(),
  resolution: z.number().int().optional(),
  status: shared.JobStatus$inboundSchema.optional(),
  trainTextEncoder: z.boolean().optional(),
  trainingEpoch: z.number().int().optional(),
  updatedAt: z.string().optional(),
});

/** @internal */
export type GetCustomElementsByUserIdUserLoras$Outbound = {
  baseModel?: string | undefined;
  createdAt?: string | undefined;
  description?: string | undefined;
  focus?: string | undefined;
  id?: number | undefined;
  instancePrompt?: string | null | undefined;
  learningRate?: number | undefined;
  name?: string | undefined;
  resolution?: number | undefined;
  status?: string | undefined;
  trainTextEncoder?: boolean | undefined;
  trainingEpoch?: number | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetCustomElementsByUserIdUserLoras$outboundSchema: z.ZodType<
  GetCustomElementsByUserIdUserLoras$Outbound,
  z.ZodTypeDef,
  GetCustomElementsByUserIdUserLoras
> = z.object({
  baseModel: z.string().optional(),
  createdAt: z.string().optional(),
  description: z.string().optional(),
  focus: z.string().optional(),
  id: z.number().int().optional(),
  instancePrompt: z.nullable(z.string()).optional(),
  learningRate: z.number().optional(),
  name: z.string().optional(),
  resolution: z.number().int().optional(),
  status: shared.JobStatus$outboundSchema.optional(),
  trainTextEncoder: z.boolean().optional(),
  trainingEpoch: z.number().int().optional(),
  updatedAt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomElementsByUserIdUserLoras$ {
  /** @deprecated use `GetCustomElementsByUserIdUserLoras$inboundSchema` instead. */
  export const inboundSchema = GetCustomElementsByUserIdUserLoras$inboundSchema;
  /** @deprecated use `GetCustomElementsByUserIdUserLoras$outboundSchema` instead. */
  export const outboundSchema =
    GetCustomElementsByUserIdUserLoras$outboundSchema;
  /** @deprecated use `GetCustomElementsByUserIdUserLoras$Outbound` instead. */
  export type Outbound = GetCustomElementsByUserIdUserLoras$Outbound;
}

export function getCustomElementsByUserIdUserLorasToJSON(
  getCustomElementsByUserIdUserLoras: GetCustomElementsByUserIdUserLoras,
): string {
  return JSON.stringify(
    GetCustomElementsByUserIdUserLoras$outboundSchema.parse(
      getCustomElementsByUserIdUserLoras,
    ),
  );
}

export function getCustomElementsByUserIdUserLorasFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomElementsByUserIdUserLoras, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetCustomElementsByUserIdUserLoras$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomElementsByUserIdUserLoras' from JSON`,
  );
}

/** @internal */
export const GetCustomElementsByUserIdResponseBody$inboundSchema: z.ZodType<
  GetCustomElementsByUserIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_loras: z.nullable(
    z.array(z.lazy(() => GetCustomElementsByUserIdUserLoras$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_loras": "userLoras",
  });
});

/** @internal */
export type GetCustomElementsByUserIdResponseBody$Outbound = {
  user_loras?:
    | Array<GetCustomElementsByUserIdUserLoras$Outbound>
    | null
    | undefined;
};

/** @internal */
export const GetCustomElementsByUserIdResponseBody$outboundSchema: z.ZodType<
  GetCustomElementsByUserIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetCustomElementsByUserIdResponseBody
> = z.object({
  userLoras: z.nullable(
    z.array(z.lazy(() => GetCustomElementsByUserIdUserLoras$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    userLoras: "user_loras",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomElementsByUserIdResponseBody$ {
  /** @deprecated use `GetCustomElementsByUserIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetCustomElementsByUserIdResponseBody$inboundSchema;
  /** @deprecated use `GetCustomElementsByUserIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetCustomElementsByUserIdResponseBody$outboundSchema;
  /** @deprecated use `GetCustomElementsByUserIdResponseBody$Outbound` instead. */
  export type Outbound = GetCustomElementsByUserIdResponseBody$Outbound;
}

export function getCustomElementsByUserIdResponseBodyToJSON(
  getCustomElementsByUserIdResponseBody: GetCustomElementsByUserIdResponseBody,
): string {
  return JSON.stringify(
    GetCustomElementsByUserIdResponseBody$outboundSchema.parse(
      getCustomElementsByUserIdResponseBody,
    ),
  );
}

export function getCustomElementsByUserIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomElementsByUserIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetCustomElementsByUserIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomElementsByUserIdResponseBody' from JSON`,
  );
}

/** @internal */
export const GetCustomElementsByUserIdResponse$inboundSchema: z.ZodType<
  GetCustomElementsByUserIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => GetCustomElementsByUserIdResponseBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetCustomElementsByUserIdResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: GetCustomElementsByUserIdResponseBody$Outbound | undefined;
};

/** @internal */
export const GetCustomElementsByUserIdResponse$outboundSchema: z.ZodType<
  GetCustomElementsByUserIdResponse$Outbound,
  z.ZodTypeDef,
  GetCustomElementsByUserIdResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => GetCustomElementsByUserIdResponseBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomElementsByUserIdResponse$ {
  /** @deprecated use `GetCustomElementsByUserIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetCustomElementsByUserIdResponse$inboundSchema;
  /** @deprecated use `GetCustomElementsByUserIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetCustomElementsByUserIdResponse$outboundSchema;
  /** @deprecated use `GetCustomElementsByUserIdResponse$Outbound` instead. */
  export type Outbound = GetCustomElementsByUserIdResponse$Outbound;
}

export function getCustomElementsByUserIdResponseToJSON(
  getCustomElementsByUserIdResponse: GetCustomElementsByUserIdResponse,
): string {
  return JSON.stringify(
    GetCustomElementsByUserIdResponse$outboundSchema.parse(
      getCustomElementsByUserIdResponse,
    ),
  );
}

export function getCustomElementsByUserIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomElementsByUserIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomElementsByUserIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomElementsByUserIdResponse' from JSON`,
  );
}
