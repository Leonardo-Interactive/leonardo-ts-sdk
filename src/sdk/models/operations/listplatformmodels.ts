/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

/**
 * columns and relationships of "generated_images"
 */
export type ListPlatformModelsGeneratedImages = {
    id?: string | null | undefined;
    url?: string | undefined;
};

/**
 * columns and relationships of "custom_models"
 */
export type ListPlatformModelsCustomModels = {
    description?: string | undefined;
    featured?: boolean | undefined;
    /**
     * columns and relationships of "generated_images"
     */
    generatedImage?: ListPlatformModelsGeneratedImages | null | undefined;
    id?: string | null | undefined;
    name?: string | undefined;
    nsfw?: boolean | undefined;
};

/**
 * Responses for GET /api/rest/v1/platformModels
 */
export type ListPlatformModelsResponseBody = {
    customModels?: Array<ListPlatformModelsCustomModels> | undefined;
};

export type ListPlatformModelsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for GET /api/rest/v1/platformModels
     */
    object?: ListPlatformModelsResponseBody | undefined;
};

/** @internal */
export namespace ListPlatformModelsGeneratedImages$ {
    export const inboundSchema: z.ZodType<
        ListPlatformModelsGeneratedImages,
        z.ZodTypeDef,
        unknown
    > = z.object({
        id: z.nullable(z.string()).optional(),
        url: z.string().optional(),
    });

    export type Outbound = {
        id?: string | null | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ListPlatformModelsGeneratedImages
    > = z.object({
        id: z.nullable(z.string()).optional(),
        url: z.string().optional(),
    });
}

/** @internal */
export namespace ListPlatformModelsCustomModels$ {
    export const inboundSchema: z.ZodType<ListPlatformModelsCustomModels, z.ZodTypeDef, unknown> = z
        .object({
            description: z.string().optional(),
            featured: z.boolean().optional(),
            generated_image: z
                .nullable(z.lazy(() => ListPlatformModelsGeneratedImages$.inboundSchema))
                .optional(),
            id: z.nullable(z.string()).optional(),
            name: z.string().optional(),
            nsfw: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                generated_image: "generatedImage",
            });
        });

    export type Outbound = {
        description?: string | undefined;
        featured?: boolean | undefined;
        generated_image?: ListPlatformModelsGeneratedImages$.Outbound | null | undefined;
        id?: string | null | undefined;
        name?: string | undefined;
        nsfw?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPlatformModelsCustomModels> =
        z
            .object({
                description: z.string().optional(),
                featured: z.boolean().optional(),
                generatedImage: z
                    .nullable(z.lazy(() => ListPlatformModelsGeneratedImages$.outboundSchema))
                    .optional(),
                id: z.nullable(z.string()).optional(),
                name: z.string().optional(),
                nsfw: z.boolean().optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    generatedImage: "generated_image",
                });
            });
}

/** @internal */
export namespace ListPlatformModelsResponseBody$ {
    export const inboundSchema: z.ZodType<ListPlatformModelsResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            custom_models: z
                .array(z.lazy(() => ListPlatformModelsCustomModels$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                custom_models: "customModels",
            });
        });

    export type Outbound = {
        custom_models?: Array<ListPlatformModelsCustomModels$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPlatformModelsResponseBody> =
        z
            .object({
                customModels: z
                    .array(z.lazy(() => ListPlatformModelsCustomModels$.outboundSchema))
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    customModels: "custom_models",
                });
            });
}

/** @internal */
export namespace ListPlatformModelsResponse$ {
    export const inboundSchema: z.ZodType<ListPlatformModelsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => ListPlatformModelsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: ListPlatformModelsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPlatformModelsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => ListPlatformModelsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
