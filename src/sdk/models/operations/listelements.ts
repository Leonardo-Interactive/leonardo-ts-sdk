/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * columns and relationships of "elements".
 */
export type Loras = {
  /**
   * Unique identifier for the element. Elements can be found from the List Elements endpoint.
   */
  akUUID?: string | null | undefined;
  /**
   * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5. Also includes SDXL and SDXL Lightning models
   */
  baseModel?: shared.SdVersions | undefined;
  /**
   * Name of the creator of the element
   */
  creatorName?: string | null | undefined;
  /**
   * Description for the element
   */
  description?: string | null | undefined;
  /**
   * Name of the element
   */
  name?: string | null | undefined;
  /**
   * URL of the element image
   */
  urlImage?: string | null | undefined;
  /**
   * Default weight for the element
   */
  weightDefault?: number | null | undefined;
  /**
   * Maximum weight for the element
   */
  weightMax?: number | null | undefined;
  /**
   * Minimum weight for the element
   */
  weightMin?: number | null | undefined;
};

/**
 * Responses for GET /api/rest/v1/elements.
 */
export type ListElementsResponseBody = {
  loras?: Array<Loras> | undefined;
};

export type ListElementsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for GET /api/rest/v1/elements.
   */
  object?: ListElementsResponseBody | undefined;
};

/** @internal */
export const Loras$inboundSchema: z.ZodType<Loras, z.ZodTypeDef, unknown> = z
  .object({
    akUUID: z.nullable(z.string()).optional(),
    baseModel: shared.SdVersions$inboundSchema.optional(),
    creatorName: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    urlImage: z.nullable(z.string()).optional(),
    weightDefault: z.nullable(z.number().int()).optional(),
    weightMax: z.nullable(z.number().int()).optional(),
    weightMin: z.nullable(z.number().int()).optional(),
  });

/** @internal */
export type Loras$Outbound = {
  akUUID?: string | null | undefined;
  baseModel?: string | undefined;
  creatorName?: string | null | undefined;
  description?: string | null | undefined;
  name?: string | null | undefined;
  urlImage?: string | null | undefined;
  weightDefault?: number | null | undefined;
  weightMax?: number | null | undefined;
  weightMin?: number | null | undefined;
};

/** @internal */
export const Loras$outboundSchema: z.ZodType<
  Loras$Outbound,
  z.ZodTypeDef,
  Loras
> = z.object({
  akUUID: z.nullable(z.string()).optional(),
  baseModel: shared.SdVersions$outboundSchema.optional(),
  creatorName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  urlImage: z.nullable(z.string()).optional(),
  weightDefault: z.nullable(z.number().int()).optional(),
  weightMax: z.nullable(z.number().int()).optional(),
  weightMin: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Loras$ {
  /** @deprecated use `Loras$inboundSchema` instead. */
  export const inboundSchema = Loras$inboundSchema;
  /** @deprecated use `Loras$outboundSchema` instead. */
  export const outboundSchema = Loras$outboundSchema;
  /** @deprecated use `Loras$Outbound` instead. */
  export type Outbound = Loras$Outbound;
}

export function lorasToJSON(loras: Loras): string {
  return JSON.stringify(Loras$outboundSchema.parse(loras));
}

export function lorasFromJSON(
  jsonString: string,
): SafeParseResult<Loras, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Loras$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Loras' from JSON`,
  );
}

/** @internal */
export const ListElementsResponseBody$inboundSchema: z.ZodType<
  ListElementsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  loras: z.array(z.lazy(() => Loras$inboundSchema)).optional(),
});

/** @internal */
export type ListElementsResponseBody$Outbound = {
  loras?: Array<Loras$Outbound> | undefined;
};

/** @internal */
export const ListElementsResponseBody$outboundSchema: z.ZodType<
  ListElementsResponseBody$Outbound,
  z.ZodTypeDef,
  ListElementsResponseBody
> = z.object({
  loras: z.array(z.lazy(() => Loras$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListElementsResponseBody$ {
  /** @deprecated use `ListElementsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListElementsResponseBody$inboundSchema;
  /** @deprecated use `ListElementsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListElementsResponseBody$outboundSchema;
  /** @deprecated use `ListElementsResponseBody$Outbound` instead. */
  export type Outbound = ListElementsResponseBody$Outbound;
}

export function listElementsResponseBodyToJSON(
  listElementsResponseBody: ListElementsResponseBody,
): string {
  return JSON.stringify(
    ListElementsResponseBody$outboundSchema.parse(listElementsResponseBody),
  );
}

export function listElementsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListElementsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListElementsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListElementsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListElementsResponse$inboundSchema: z.ZodType<
  ListElementsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => ListElementsResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ListElementsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: ListElementsResponseBody$Outbound | undefined;
};

/** @internal */
export const ListElementsResponse$outboundSchema: z.ZodType<
  ListElementsResponse$Outbound,
  z.ZodTypeDef,
  ListElementsResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => ListElementsResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListElementsResponse$ {
  /** @deprecated use `ListElementsResponse$inboundSchema` instead. */
  export const inboundSchema = ListElementsResponse$inboundSchema;
  /** @deprecated use `ListElementsResponse$outboundSchema` instead. */
  export const outboundSchema = ListElementsResponse$outboundSchema;
  /** @deprecated use `ListElementsResponse$Outbound` instead. */
  export type Outbound = ListElementsResponse$Outbound;
}

export function listElementsResponseToJSON(
  listElementsResponse: ListElementsResponse,
): string {
  return JSON.stringify(
    ListElementsResponse$outboundSchema.parse(listElementsResponse),
  );
}

export function listElementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListElementsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListElementsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListElementsResponse' from JSON`,
  );
}
