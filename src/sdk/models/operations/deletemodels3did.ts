/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Query parameters can also be provided in the request body as a JSON object
 */
export type DeleteModels3dIdRequestBody = {
    id?: string | null | undefined;
};

export type DeleteModels3dIdRequest = {
    /**
     * _"id" is required (enter it either in parameters or request body)_
     */
    id: string;
    /**
     * Query parameters can also be provided in the request body as a JSON object
     */
    requestBody?: DeleteModels3dIdRequestBody | undefined;
};

/**
 * columns and relationships of "model_assets"
 */
export type ModelAssets = {
    id?: string | null | undefined;
};

/**
 * Responses for DELETE /api/rest/v1/models-3d/{id}
 */
export type DeleteModels3dIdResponseBody = {
    /**
     * columns and relationships of "model_assets"
     */
    deleteModelAssetsByPk?: ModelAssets | null | undefined;
};

export type DeleteModels3dIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for DELETE /api/rest/v1/models-3d/{id}
     */
    object?: DeleteModels3dIdResponseBody | undefined;
};

/** @internal */
export namespace DeleteModels3dIdRequestBody$ {
    export type Inbound = {
        id?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<DeleteModels3dIdRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteModels3dIdRequestBody> = z
        .object({
            id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace DeleteModels3dIdRequest$ {
    export type Inbound = {
        id: string;
        RequestBody?: DeleteModels3dIdRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DeleteModels3dIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            RequestBody: z.lazy(() => DeleteModels3dIdRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        id: string;
        RequestBody?: DeleteModels3dIdRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteModels3dIdRequest> = z
        .object({
            id: z.string(),
            requestBody: z.lazy(() => DeleteModels3dIdRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace ModelAssets$ {
    export type Inbound = {
        id?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<ModelAssets, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ModelAssets> = z
        .object({
            id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace DeleteModels3dIdResponseBody$ {
    export type Inbound = {
        delete_model_assets_by_pk?: ModelAssets$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<DeleteModels3dIdResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            delete_model_assets_by_pk: z
                .nullable(z.lazy(() => ModelAssets$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.delete_model_assets_by_pk === undefined
                    ? null
                    : { deleteModelAssetsByPk: v.delete_model_assets_by_pk }),
            };
        });

    export type Outbound = {
        delete_model_assets_by_pk?: ModelAssets$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteModels3dIdResponseBody> = z
        .object({
            deleteModelAssetsByPk: z.nullable(z.lazy(() => ModelAssets$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.deleteModelAssetsByPk === undefined
                    ? null
                    : { delete_model_assets_by_pk: v.deleteModelAssetsByPk }),
            };
        });
}

/** @internal */
export namespace DeleteModels3dIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: DeleteModels3dIdResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DeleteModels3dIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => DeleteModels3dIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: DeleteModels3dIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteModels3dIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => DeleteModels3dIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
