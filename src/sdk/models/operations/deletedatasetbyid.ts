/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type DeleteDatasetByIdRequest = {
    /**
     * The ID of the dataset to delete.
     */
    id: string;
};

/**
 * columns and relationships of "datasets"
 */
export type DeleteDatasetByIdDatasets = {
    id?: string | null | undefined;
};

/**
 * Responses for DELETE /datasets/{id}
 */
export type DeleteDatasetByIdResponseBody = {
    /**
     * columns and relationships of "datasets"
     */
    deleteDatasetsByPk?: DeleteDatasetByIdDatasets | null | undefined;
};

export type DeleteDatasetByIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for DELETE /datasets/{id}
     */
    object?: DeleteDatasetByIdResponseBody | undefined;
};

/** @internal */
export namespace DeleteDatasetByIdRequest$ {
    export const inboundSchema: z.ZodType<DeleteDatasetByIdRequest, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string(),
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteDatasetByIdRequest> =
        z.object({
            id: z.string(),
        });
}

/** @internal */
export namespace DeleteDatasetByIdDatasets$ {
    export const inboundSchema: z.ZodType<DeleteDatasetByIdDatasets, z.ZodTypeDef, unknown> =
        z.object({
            id: z.nullable(z.string()).optional(),
        });

    export type Outbound = {
        id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteDatasetByIdDatasets> =
        z.object({
            id: z.nullable(z.string()).optional(),
        });
}

/** @internal */
export namespace DeleteDatasetByIdResponseBody$ {
    export const inboundSchema: z.ZodType<DeleteDatasetByIdResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            delete_datasets_by_pk: z
                .nullable(z.lazy(() => DeleteDatasetByIdDatasets$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                delete_datasets_by_pk: "deleteDatasetsByPk",
            });
        });

    export type Outbound = {
        delete_datasets_by_pk?: DeleteDatasetByIdDatasets$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteDatasetByIdResponseBody> =
        z
            .object({
                deleteDatasetsByPk: z
                    .nullable(z.lazy(() => DeleteDatasetByIdDatasets$.outboundSchema))
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    deleteDatasetsByPk: "delete_datasets_by_pk",
                });
            });
}

/** @internal */
export namespace DeleteDatasetByIdResponse$ {
    export const inboundSchema: z.ZodType<DeleteDatasetByIdResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => DeleteDatasetByIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: DeleteDatasetByIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteDatasetByIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => DeleteDatasetByIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
