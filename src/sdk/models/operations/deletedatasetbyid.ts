/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteDatasetByIdRequest = {
  /**
   * The ID of the dataset to delete.
   */
  id: string;
};

/**
 * columns and relationships of "datasets"
 */
export type DeleteDatasetByIdDatasets = {
  id?: string | null | undefined;
};

/**
 * Responses for DELETE /datasets/{id}
 */
export type DeleteDatasetByIdResponseBody = {
  /**
   * columns and relationships of "datasets"
   */
  deleteDatasetsByPk?: DeleteDatasetByIdDatasets | null | undefined;
};

export type DeleteDatasetByIdResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for DELETE /datasets/{id}
   */
  object?: DeleteDatasetByIdResponseBody | undefined;
};

/** @internal */
export const DeleteDatasetByIdRequest$inboundSchema: z.ZodType<
  DeleteDatasetByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteDatasetByIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteDatasetByIdRequest$outboundSchema: z.ZodType<
  DeleteDatasetByIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteDatasetByIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatasetByIdRequest$ {
  /** @deprecated use `DeleteDatasetByIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteDatasetByIdRequest$inboundSchema;
  /** @deprecated use `DeleteDatasetByIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteDatasetByIdRequest$outboundSchema;
  /** @deprecated use `DeleteDatasetByIdRequest$Outbound` instead. */
  export type Outbound = DeleteDatasetByIdRequest$Outbound;
}

export function deleteDatasetByIdRequestToJSON(
  deleteDatasetByIdRequest: DeleteDatasetByIdRequest,
): string {
  return JSON.stringify(
    DeleteDatasetByIdRequest$outboundSchema.parse(deleteDatasetByIdRequest),
  );
}

export function deleteDatasetByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDatasetByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDatasetByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatasetByIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteDatasetByIdDatasets$inboundSchema: z.ZodType<
  DeleteDatasetByIdDatasets,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type DeleteDatasetByIdDatasets$Outbound = {
  id?: string | null | undefined;
};

/** @internal */
export const DeleteDatasetByIdDatasets$outboundSchema: z.ZodType<
  DeleteDatasetByIdDatasets$Outbound,
  z.ZodTypeDef,
  DeleteDatasetByIdDatasets
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatasetByIdDatasets$ {
  /** @deprecated use `DeleteDatasetByIdDatasets$inboundSchema` instead. */
  export const inboundSchema = DeleteDatasetByIdDatasets$inboundSchema;
  /** @deprecated use `DeleteDatasetByIdDatasets$outboundSchema` instead. */
  export const outboundSchema = DeleteDatasetByIdDatasets$outboundSchema;
  /** @deprecated use `DeleteDatasetByIdDatasets$Outbound` instead. */
  export type Outbound = DeleteDatasetByIdDatasets$Outbound;
}

export function deleteDatasetByIdDatasetsToJSON(
  deleteDatasetByIdDatasets: DeleteDatasetByIdDatasets,
): string {
  return JSON.stringify(
    DeleteDatasetByIdDatasets$outboundSchema.parse(deleteDatasetByIdDatasets),
  );
}

export function deleteDatasetByIdDatasetsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDatasetByIdDatasets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDatasetByIdDatasets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatasetByIdDatasets' from JSON`,
  );
}

/** @internal */
export const DeleteDatasetByIdResponseBody$inboundSchema: z.ZodType<
  DeleteDatasetByIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  delete_datasets_by_pk: z.nullable(
    z.lazy(() => DeleteDatasetByIdDatasets$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "delete_datasets_by_pk": "deleteDatasetsByPk",
  });
});

/** @internal */
export type DeleteDatasetByIdResponseBody$Outbound = {
  delete_datasets_by_pk?: DeleteDatasetByIdDatasets$Outbound | null | undefined;
};

/** @internal */
export const DeleteDatasetByIdResponseBody$outboundSchema: z.ZodType<
  DeleteDatasetByIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteDatasetByIdResponseBody
> = z.object({
  deleteDatasetsByPk: z.nullable(
    z.lazy(() => DeleteDatasetByIdDatasets$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    deleteDatasetsByPk: "delete_datasets_by_pk",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatasetByIdResponseBody$ {
  /** @deprecated use `DeleteDatasetByIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteDatasetByIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteDatasetByIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteDatasetByIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteDatasetByIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteDatasetByIdResponseBody$Outbound;
}

export function deleteDatasetByIdResponseBodyToJSON(
  deleteDatasetByIdResponseBody: DeleteDatasetByIdResponseBody,
): string {
  return JSON.stringify(
    DeleteDatasetByIdResponseBody$outboundSchema.parse(
      deleteDatasetByIdResponseBody,
    ),
  );
}

export function deleteDatasetByIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDatasetByIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDatasetByIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatasetByIdResponseBody' from JSON`,
  );
}

/** @internal */
export const DeleteDatasetByIdResponse$inboundSchema: z.ZodType<
  DeleteDatasetByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => DeleteDatasetByIdResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DeleteDatasetByIdResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: DeleteDatasetByIdResponseBody$Outbound | undefined;
};

/** @internal */
export const DeleteDatasetByIdResponse$outboundSchema: z.ZodType<
  DeleteDatasetByIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteDatasetByIdResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => DeleteDatasetByIdResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatasetByIdResponse$ {
  /** @deprecated use `DeleteDatasetByIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteDatasetByIdResponse$inboundSchema;
  /** @deprecated use `DeleteDatasetByIdResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteDatasetByIdResponse$outboundSchema;
  /** @deprecated use `DeleteDatasetByIdResponse$Outbound` instead. */
  export type Outbound = DeleteDatasetByIdResponse$Outbound;
}

export function deleteDatasetByIdResponseToJSON(
  deleteDatasetByIdResponse: DeleteDatasetByIdResponse,
): string {
  return JSON.stringify(
    DeleteDatasetByIdResponse$outboundSchema.parse(deleteDatasetByIdResponse),
  );
}

export function deleteDatasetByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDatasetByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDatasetByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatasetByIdResponse' from JSON`,
  );
}
