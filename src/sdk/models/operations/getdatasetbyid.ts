/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export type GetDatasetByIdRequest = {
    /**
     * The ID of the dataset to return.
     */
    id: string;
};

/**
 * columns and relationships of "dataset_images"
 */
export type DatasetImages = {
    createdAt?: string | undefined;
    id?: string | null | undefined;
    url?: string | undefined;
};

/**
 * columns and relationships of "datasets"
 */
export type GetDatasetByIdDatasets = {
    createdAt?: string | undefined;
    datasetImages?: Array<DatasetImages> | undefined;
    description?: string | null | undefined;
    id?: string | null | undefined;
    name?: string | undefined;
    updatedAt?: string | undefined;
};

/**
 * Responses for GET /datasets/{id}
 */
export type GetDatasetByIdResponseBody = {
    /**
     * columns and relationships of "datasets"
     */
    datasetsByPk?: GetDatasetByIdDatasets | null | undefined;
};

export type GetDatasetByIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for GET /datasets/{id}
     */
    object?: GetDatasetByIdResponseBody | undefined;
};

/** @internal */
export namespace GetDatasetByIdRequest$ {
    export const inboundSchema: z.ZodType<GetDatasetByIdRequest, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
    });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDatasetByIdRequest> =
        z.object({
            id: z.string(),
        });
}

/** @internal */
export namespace DatasetImages$ {
    export const inboundSchema: z.ZodType<DatasetImages, z.ZodTypeDef, unknown> = z.object({
        createdAt: z.string().optional(),
        id: z.nullable(z.string()).optional(),
        url: z.string().optional(),
    });

    export type Outbound = {
        createdAt?: string | undefined;
        id?: string | null | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DatasetImages> = z.object({
        createdAt: z.string().optional(),
        id: z.nullable(z.string()).optional(),
        url: z.string().optional(),
    });
}

/** @internal */
export namespace GetDatasetByIdDatasets$ {
    export const inboundSchema: z.ZodType<GetDatasetByIdDatasets, z.ZodTypeDef, unknown> = z
        .object({
            createdAt: z.string().optional(),
            dataset_images: z.array(z.lazy(() => DatasetImages$.inboundSchema)).optional(),
            description: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.string().optional(),
            updatedAt: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                dataset_images: "datasetImages",
            });
        });

    export type Outbound = {
        createdAt?: string | undefined;
        dataset_images?: Array<DatasetImages$.Outbound> | undefined;
        description?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | undefined;
        updatedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDatasetByIdDatasets> = z
        .object({
            createdAt: z.string().optional(),
            datasetImages: z.array(z.lazy(() => DatasetImages$.outboundSchema)).optional(),
            description: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.string().optional(),
            updatedAt: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                datasetImages: "dataset_images",
            });
        });
}

/** @internal */
export namespace GetDatasetByIdResponseBody$ {
    export const inboundSchema: z.ZodType<GetDatasetByIdResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            datasets_by_pk: z
                .nullable(z.lazy(() => GetDatasetByIdDatasets$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                datasets_by_pk: "datasetsByPk",
            });
        });

    export type Outbound = {
        datasets_by_pk?: GetDatasetByIdDatasets$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDatasetByIdResponseBody> = z
        .object({
            datasetsByPk: z
                .nullable(z.lazy(() => GetDatasetByIdDatasets$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                datasetsByPk: "datasets_by_pk",
            });
        });
}

/** @internal */
export namespace GetDatasetByIdResponse$ {
    export const inboundSchema: z.ZodType<GetDatasetByIdResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetDatasetByIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetDatasetByIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDatasetByIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetDatasetByIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
