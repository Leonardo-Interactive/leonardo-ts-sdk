/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * columns and relationships of "style"
 */
export type Style = {
  akUUID?: string | null | undefined;
  description?: string | null | undefined;
  name?: string | undefined;
};

/**
 * Responses for GET /api/rest/v1/platform-styles
 */
export type ListPlatformStylesResponseBody = {
  style?: Array<Style> | undefined;
};

export type ListPlatformStylesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for GET /api/rest/v1/platform-styles
   */
  object?: ListPlatformStylesResponseBody | undefined;
};

/** @internal */
export const Style$inboundSchema: z.ZodType<Style, z.ZodTypeDef, unknown> = z
  .object({
    akUUID: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    name: z.string().optional(),
  });

/** @internal */
export type Style$Outbound = {
  akUUID?: string | null | undefined;
  description?: string | null | undefined;
  name?: string | undefined;
};

/** @internal */
export const Style$outboundSchema: z.ZodType<
  Style$Outbound,
  z.ZodTypeDef,
  Style
> = z.object({
  akUUID: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Style$ {
  /** @deprecated use `Style$inboundSchema` instead. */
  export const inboundSchema = Style$inboundSchema;
  /** @deprecated use `Style$outboundSchema` instead. */
  export const outboundSchema = Style$outboundSchema;
  /** @deprecated use `Style$Outbound` instead. */
  export type Outbound = Style$Outbound;
}

export function styleToJSON(style: Style): string {
  return JSON.stringify(Style$outboundSchema.parse(style));
}

export function styleFromJSON(
  jsonString: string,
): SafeParseResult<Style, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Style$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Style' from JSON`,
  );
}

/** @internal */
export const ListPlatformStylesResponseBody$inboundSchema: z.ZodType<
  ListPlatformStylesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  style: z.array(z.lazy(() => Style$inboundSchema)).optional(),
});

/** @internal */
export type ListPlatformStylesResponseBody$Outbound = {
  style?: Array<Style$Outbound> | undefined;
};

/** @internal */
export const ListPlatformStylesResponseBody$outboundSchema: z.ZodType<
  ListPlatformStylesResponseBody$Outbound,
  z.ZodTypeDef,
  ListPlatformStylesResponseBody
> = z.object({
  style: z.array(z.lazy(() => Style$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPlatformStylesResponseBody$ {
  /** @deprecated use `ListPlatformStylesResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListPlatformStylesResponseBody$inboundSchema;
  /** @deprecated use `ListPlatformStylesResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListPlatformStylesResponseBody$outboundSchema;
  /** @deprecated use `ListPlatformStylesResponseBody$Outbound` instead. */
  export type Outbound = ListPlatformStylesResponseBody$Outbound;
}

export function listPlatformStylesResponseBodyToJSON(
  listPlatformStylesResponseBody: ListPlatformStylesResponseBody,
): string {
  return JSON.stringify(
    ListPlatformStylesResponseBody$outboundSchema.parse(
      listPlatformStylesResponseBody,
    ),
  );
}

export function listPlatformStylesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListPlatformStylesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPlatformStylesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPlatformStylesResponseBody' from JSON`,
  );
}

/** @internal */
export const ListPlatformStylesResponse$inboundSchema: z.ZodType<
  ListPlatformStylesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => ListPlatformStylesResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ListPlatformStylesResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: ListPlatformStylesResponseBody$Outbound | undefined;
};

/** @internal */
export const ListPlatformStylesResponse$outboundSchema: z.ZodType<
  ListPlatformStylesResponse$Outbound,
  z.ZodTypeDef,
  ListPlatformStylesResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => ListPlatformStylesResponseBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPlatformStylesResponse$ {
  /** @deprecated use `ListPlatformStylesResponse$inboundSchema` instead. */
  export const inboundSchema = ListPlatformStylesResponse$inboundSchema;
  /** @deprecated use `ListPlatformStylesResponse$outboundSchema` instead. */
  export const outboundSchema = ListPlatformStylesResponse$outboundSchema;
  /** @deprecated use `ListPlatformStylesResponse$Outbound` instead. */
  export type Outbound = ListPlatformStylesResponse$Outbound;
}

export function listPlatformStylesResponseToJSON(
  listPlatformStylesResponse: ListPlatformStylesResponse,
): string {
  return JSON.stringify(
    ListPlatformStylesResponse$outboundSchema.parse(listPlatformStylesResponse),
  );
}

export function listPlatformStylesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPlatformStylesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPlatformStylesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPlatformStylesResponse' from JSON`,
  );
}
