/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

/**
 * Parameters for FANTASY_AVATAR_GENERATION service
 */
export type PricingCalculatorObject = {
    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features
     */
    imageHeight?: number | undefined;
    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features
     */
    imageWidth?: number | undefined;
    /**
     * The number of images to generate. Must be between 1 and 8. If either width or height is over 768, must be between 1 and 4.
     */
    numImages?: number | undefined;
};

/**
 * Parameters for IMAGE_GENERATION service
 */
export type PricingCalculatorPricingCalculatorObject = {
    /**
     * Enable to use Alchemy.
     */
    alchemyMode?: boolean | undefined;
    /**
     * The total cost of controlnets input.
     */
    controlnetsCost?: number | null | undefined;
    /**
     * Enable to use high resolution.
     */
    highResolution?: boolean | undefined;
    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features
     */
    imageHeight?: number | undefined;
    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features
     */
    imageWidth?: number | undefined;
    /**
     * The Step Count to use for the generation. Must be between 10 and 60.
     */
    inferenceSteps?: number | undefined;
    /**
     * Enable to use custom model.
     */
    isModelCustom?: boolean | null | undefined;
    /**
     * Enable to use SDXL model.
     */
    isSDXL?: boolean | null | undefined;
    /**
     * Enable to use SDXL Lightning model.
     */
    isSDXLLightning?: boolean | null | undefined;
    /**
     * The number of elements used for the generation.
     */
    loraCount?: number | null | undefined;
    /**
     * The number of images to generate. Must be between 1 and 8. If either width or height is over 768, must be between 1 and 4.
     */
    numImages?: number | undefined;
    /**
     * Enable to use prompt magic.
     */
    promptMagic?: boolean | undefined;
    /**
     * Strength of prompt magic. Must be a float between 0.1 and 1.0
     */
    promptMagicStrength?: number | null | undefined;
    /**
     * Strength of prompt magic.
     */
    promptMagicStrengthArg?: number | null | undefined;
};

/**
 * Parameters for LCM_GENERATION service
 */
export type PricingCalculatorPricingCalculatorRequestObject = {
    /**
     * The output height of the image. Must be 512, 640 or 1024.
     */
    height?: number | null | undefined;
    /**
     * Enable for instant upscale
     */
    instantRefine?: boolean | null | undefined;
    /**
     * Enable for normal alchemy upscale
     */
    refine?: boolean | null | undefined;
    /**
     * The output width of the image. Must be 512, 640 or 1024.
     */
    width?: number | null | undefined;
};

/**
 * Parameters for MODEL_TRAINING service
 */
export type PricingCalculatorPricingCalculatorRequestRequestBodyObject = {
    /**
     * The resolution for training. Must be 512 or 768.
     */
    resolution?: number | undefined;
};

/**
 * Parameters for MOTION_GENERATION service
 */
export type PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsObject = {
    /**
     * The total duration of the motion generation in seconds.
     */
    durationSeconds?: number | undefined;
};

/**
 * Parameters for TEXTURE_GENERATION service
 */
export type PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsTEXTUREGENERATIONObject =
    {
        preview?: boolean | undefined;
    };

/**
 * Parameters for UNIVERSAL_UPSCALER service
 */
export type PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsUNIVERSALUPSCALERObject =
    {
        /**
         * The maximum upscaled image size is 20 megapixels.
         */
        megapixel?: number | undefined;
    };

/**
 * Parameters for the service
 */
export type ObjectT = {
    /**
     * Parameters for FANTASY_AVATAR_GENERATION service
     */
    fantasyAvatarGeneration?: PricingCalculatorObject | null | undefined;
    /**
     * Parameters for IMAGE_GENERATION service
     */
    imageGeneration?: PricingCalculatorPricingCalculatorObject | null | undefined;
    /**
     * Parameters for LCM_GENERATION service
     */
    lcmGeneration?: PricingCalculatorPricingCalculatorRequestObject | null | undefined;
    /**
     * Parameters for MODEL_TRAINING service
     */
    modelTraining?: PricingCalculatorPricingCalculatorRequestRequestBodyObject | null | undefined;
    /**
     * Parameters for MOTION_GENERATION service
     */
    motionGeneration?:
        | PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsObject
        | null
        | undefined;
    /**
     * Parameters for TEXTURE_GENERATION service
     */
    textureGeneration?:
        | PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsTEXTUREGENERATIONObject
        | null
        | undefined;
    /**
     * Parameters for UNIVERSAL_UPSCALER service
     */
    universalUpscaler?:
        | PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsUNIVERSALUPSCALERObject
        | null
        | undefined;
};

export type PricingCalculatorRequestBody = {
    /**
     * The services to be chosen for calculating the API credit cost.
     */
    service?: shared.PricingCalculatorServices | undefined;
    /**
     * Parameters for the service
     */
    serviceParams?: ObjectT | undefined;
};

export type CalculateProductionApiServiceCost = {
    /**
     * API service cost to generate the image.
     */
    cost?: number | undefined;
};

/**
 * Responses for POST /pricing-calculator
 */
export type PricingCalculatorResponseBody = {
    calculateProductionApiServiceCost?: CalculateProductionApiServiceCost | null | undefined;
};

export type PricingCalculatorResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /pricing-calculator
     */
    object?: PricingCalculatorResponseBody | undefined;
};

/** @internal */
export namespace PricingCalculatorObject$ {
    export const inboundSchema: z.ZodType<PricingCalculatorObject, z.ZodTypeDef, unknown> =
        z.object({
            imageHeight: z.number().int().optional(),
            imageWidth: z.number().int().optional(),
            numImages: z.number().int().optional(),
        });

    export type Outbound = {
        imageHeight?: number | undefined;
        imageWidth?: number | undefined;
        numImages?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PricingCalculatorObject> =
        z.object({
            imageHeight: z.number().int().optional(),
            imageWidth: z.number().int().optional(),
            numImages: z.number().int().optional(),
        });
}

/** @internal */
export namespace PricingCalculatorPricingCalculatorObject$ {
    export const inboundSchema: z.ZodType<
        PricingCalculatorPricingCalculatorObject,
        z.ZodTypeDef,
        unknown
    > = z.object({
        alchemyMode: z.boolean().optional(),
        controlnetsCost: z.nullable(z.number().int()).optional(),
        highResolution: z.boolean().optional(),
        imageHeight: z.number().int().optional(),
        imageWidth: z.number().int().optional(),
        inferenceSteps: z.number().int().optional(),
        isModelCustom: z.nullable(z.boolean()).optional(),
        isSDXL: z.nullable(z.boolean()).optional(),
        isSDXLLightning: z.nullable(z.boolean()).optional(),
        loraCount: z.nullable(z.number().int()).optional(),
        numImages: z.number().int().optional(),
        promptMagic: z.boolean().optional(),
        promptMagicStrength: z.nullable(z.number()).optional(),
        promptMagicStrengthArg: z.nullable(z.number().int()).optional(),
    });

    export type Outbound = {
        alchemyMode?: boolean | undefined;
        controlnetsCost?: number | null | undefined;
        highResolution?: boolean | undefined;
        imageHeight?: number | undefined;
        imageWidth?: number | undefined;
        inferenceSteps?: number | undefined;
        isModelCustom?: boolean | null | undefined;
        isSDXL?: boolean | null | undefined;
        isSDXLLightning?: boolean | null | undefined;
        loraCount?: number | null | undefined;
        numImages?: number | undefined;
        promptMagic?: boolean | undefined;
        promptMagicStrength?: number | null | undefined;
        promptMagicStrengthArg?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PricingCalculatorPricingCalculatorObject
    > = z.object({
        alchemyMode: z.boolean().optional(),
        controlnetsCost: z.nullable(z.number().int()).optional(),
        highResolution: z.boolean().optional(),
        imageHeight: z.number().int().optional(),
        imageWidth: z.number().int().optional(),
        inferenceSteps: z.number().int().optional(),
        isModelCustom: z.nullable(z.boolean()).optional(),
        isSDXL: z.nullable(z.boolean()).optional(),
        isSDXLLightning: z.nullable(z.boolean()).optional(),
        loraCount: z.nullable(z.number().int()).optional(),
        numImages: z.number().int().optional(),
        promptMagic: z.boolean().optional(),
        promptMagicStrength: z.nullable(z.number()).optional(),
        promptMagicStrengthArg: z.nullable(z.number().int()).optional(),
    });
}

/** @internal */
export namespace PricingCalculatorPricingCalculatorRequestObject$ {
    export const inboundSchema: z.ZodType<
        PricingCalculatorPricingCalculatorRequestObject,
        z.ZodTypeDef,
        unknown
    > = z.object({
        height: z.nullable(z.number().int()).optional(),
        instantRefine: z.nullable(z.boolean()).optional(),
        refine: z.nullable(z.boolean()).optional(),
        width: z.nullable(z.number().int()).optional(),
    });

    export type Outbound = {
        height?: number | null | undefined;
        instantRefine?: boolean | null | undefined;
        refine?: boolean | null | undefined;
        width?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PricingCalculatorPricingCalculatorRequestObject
    > = z.object({
        height: z.nullable(z.number().int()).optional(),
        instantRefine: z.nullable(z.boolean()).optional(),
        refine: z.nullable(z.boolean()).optional(),
        width: z.nullable(z.number().int()).optional(),
    });
}

/** @internal */
export namespace PricingCalculatorPricingCalculatorRequestRequestBodyObject$ {
    export const inboundSchema: z.ZodType<
        PricingCalculatorPricingCalculatorRequestRequestBodyObject,
        z.ZodTypeDef,
        unknown
    > = z.object({
        resolution: z.number().int().optional(),
    });

    export type Outbound = {
        resolution?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PricingCalculatorPricingCalculatorRequestRequestBodyObject
    > = z.object({
        resolution: z.number().int().optional(),
    });
}

/** @internal */
export namespace PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsObject$ {
    export const inboundSchema: z.ZodType<
        PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsObject,
        z.ZodTypeDef,
        unknown
    > = z.object({
        durationSeconds: z.number().int().optional(),
    });

    export type Outbound = {
        durationSeconds?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsObject
    > = z.object({
        durationSeconds: z.number().int().optional(),
    });
}

/** @internal */
export namespace PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsTEXTUREGENERATIONObject$ {
    export const inboundSchema: z.ZodType<
        PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsTEXTUREGENERATIONObject,
        z.ZodTypeDef,
        unknown
    > = z.object({
        preview: z.boolean().optional(),
    });

    export type Outbound = {
        preview?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsTEXTUREGENERATIONObject
    > = z.object({
        preview: z.boolean().optional(),
    });
}

/** @internal */
export namespace PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsUNIVERSALUPSCALERObject$ {
    export const inboundSchema: z.ZodType<
        PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsUNIVERSALUPSCALERObject,
        z.ZodTypeDef,
        unknown
    > = z.object({
        megapixel: z.number().int().optional(),
    });

    export type Outbound = {
        megapixel?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsUNIVERSALUPSCALERObject
    > = z.object({
        megapixel: z.number().int().optional(),
    });
}

/** @internal */
export namespace ObjectT$ {
    export const inboundSchema: z.ZodType<ObjectT, z.ZodTypeDef, unknown> = z
        .object({
            FANTASY_AVATAR_GENERATION: z
                .nullable(z.lazy(() => PricingCalculatorObject$.inboundSchema))
                .optional(),
            IMAGE_GENERATION: z
                .nullable(z.lazy(() => PricingCalculatorPricingCalculatorObject$.inboundSchema))
                .optional(),
            LCM_GENERATION: z
                .nullable(
                    z.lazy(() => PricingCalculatorPricingCalculatorRequestObject$.inboundSchema)
                )
                .optional(),
            MODEL_TRAINING: z
                .nullable(
                    z.lazy(
                        () =>
                            PricingCalculatorPricingCalculatorRequestRequestBodyObject$.inboundSchema
                    )
                )
                .optional(),
            MOTION_GENERATION: z
                .nullable(
                    z.lazy(
                        () =>
                            PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsObject$.inboundSchema
                    )
                )
                .optional(),
            TEXTURE_GENERATION: z
                .nullable(
                    z.lazy(
                        () =>
                            PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsTEXTUREGENERATIONObject$.inboundSchema
                    )
                )
                .optional(),
            UNIVERSAL_UPSCALER: z
                .nullable(
                    z.lazy(
                        () =>
                            PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsUNIVERSALUPSCALERObject$.inboundSchema
                    )
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                FANTASY_AVATAR_GENERATION: "fantasyAvatarGeneration",
                IMAGE_GENERATION: "imageGeneration",
                LCM_GENERATION: "lcmGeneration",
                MODEL_TRAINING: "modelTraining",
                MOTION_GENERATION: "motionGeneration",
                TEXTURE_GENERATION: "textureGeneration",
                UNIVERSAL_UPSCALER: "universalUpscaler",
            });
        });

    export type Outbound = {
        FANTASY_AVATAR_GENERATION?: PricingCalculatorObject$.Outbound | null | undefined;
        IMAGE_GENERATION?: PricingCalculatorPricingCalculatorObject$.Outbound | null | undefined;
        LCM_GENERATION?:
            | PricingCalculatorPricingCalculatorRequestObject$.Outbound
            | null
            | undefined;
        MODEL_TRAINING?:
            | PricingCalculatorPricingCalculatorRequestRequestBodyObject$.Outbound
            | null
            | undefined;
        MOTION_GENERATION?:
            | PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsObject$.Outbound
            | null
            | undefined;
        TEXTURE_GENERATION?:
            | PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsTEXTUREGENERATIONObject$.Outbound
            | null
            | undefined;
        UNIVERSAL_UPSCALER?:
            | PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsUNIVERSALUPSCALERObject$.Outbound
            | null
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjectT> = z
        .object({
            fantasyAvatarGeneration: z
                .nullable(z.lazy(() => PricingCalculatorObject$.outboundSchema))
                .optional(),
            imageGeneration: z
                .nullable(z.lazy(() => PricingCalculatorPricingCalculatorObject$.outboundSchema))
                .optional(),
            lcmGeneration: z
                .nullable(
                    z.lazy(() => PricingCalculatorPricingCalculatorRequestObject$.outboundSchema)
                )
                .optional(),
            modelTraining: z
                .nullable(
                    z.lazy(
                        () =>
                            PricingCalculatorPricingCalculatorRequestRequestBodyObject$.outboundSchema
                    )
                )
                .optional(),
            motionGeneration: z
                .nullable(
                    z.lazy(
                        () =>
                            PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsObject$.outboundSchema
                    )
                )
                .optional(),
            textureGeneration: z
                .nullable(
                    z.lazy(
                        () =>
                            PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsTEXTUREGENERATIONObject$.outboundSchema
                    )
                )
                .optional(),
            universalUpscaler: z
                .nullable(
                    z.lazy(
                        () =>
                            PricingCalculatorPricingCalculatorRequestRequestBodyServiceParamsUNIVERSALUPSCALERObject$.outboundSchema
                    )
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                fantasyAvatarGeneration: "FANTASY_AVATAR_GENERATION",
                imageGeneration: "IMAGE_GENERATION",
                lcmGeneration: "LCM_GENERATION",
                modelTraining: "MODEL_TRAINING",
                motionGeneration: "MOTION_GENERATION",
                textureGeneration: "TEXTURE_GENERATION",
                universalUpscaler: "UNIVERSAL_UPSCALER",
            });
        });
}

/** @internal */
export namespace PricingCalculatorRequestBody$ {
    export const inboundSchema: z.ZodType<PricingCalculatorRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            service: shared.PricingCalculatorServices$.inboundSchema.optional(),
            serviceParams: z.lazy(() => ObjectT$.inboundSchema).optional(),
        });

    export type Outbound = {
        service?: string | undefined;
        serviceParams?: ObjectT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PricingCalculatorRequestBody> =
        z.object({
            service: shared.PricingCalculatorServices$.outboundSchema.optional(),
            serviceParams: z.lazy(() => ObjectT$.outboundSchema).optional(),
        });
}

/** @internal */
export namespace CalculateProductionApiServiceCost$ {
    export const inboundSchema: z.ZodType<
        CalculateProductionApiServiceCost,
        z.ZodTypeDef,
        unknown
    > = z.object({
        cost: z.number().int().optional(),
    });

    export type Outbound = {
        cost?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CalculateProductionApiServiceCost
    > = z.object({
        cost: z.number().int().optional(),
    });
}

/** @internal */
export namespace PricingCalculatorResponseBody$ {
    export const inboundSchema: z.ZodType<PricingCalculatorResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            calculateProductionApiServiceCost: z
                .nullable(z.lazy(() => CalculateProductionApiServiceCost$.inboundSchema))
                .optional(),
        });

    export type Outbound = {
        calculateProductionApiServiceCost?:
            | CalculateProductionApiServiceCost$.Outbound
            | null
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PricingCalculatorResponseBody> =
        z.object({
            calculateProductionApiServiceCost: z
                .nullable(z.lazy(() => CalculateProductionApiServiceCost$.outboundSchema))
                .optional(),
        });
}

/** @internal */
export namespace PricingCalculatorResponse$ {
    export const inboundSchema: z.ZodType<PricingCalculatorResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PricingCalculatorResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PricingCalculatorResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PricingCalculatorResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PricingCalculatorResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
