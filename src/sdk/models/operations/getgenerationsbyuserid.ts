/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type GetGenerationsByUserIdRequest = {
    limit?: number | undefined;
    offset?: number | undefined;
    userId: string;
};

/**
 * columns and relationships of "generated_image_variation_generic"
 */
export type GetGenerationsByUserIdGeneratedImageVariationGeneric = {
    id?: string | null | undefined;
    /**
     * The status of the current task.
     */
    status?: shared.JobStatus | undefined;
    /**
     * The type of variation.
     */
    transformType?: shared.VariationType | undefined;
    url?: string | null | undefined;
};

/**
 * columns and relationships of "generated_images"
 */
export type GetGenerationsByUserIdGeneratedImages = {
    generatedImageVariationGenerics?:
        | Array<GetGenerationsByUserIdGeneratedImageVariationGeneric>
        | undefined;
    id?: string | null | undefined;
    /**
     * If it is an image to video generation.
     */
    imageToVideo?: boolean | null | undefined;
    likeCount?: number | undefined;
    /**
     * If generation is of motion type.
     */
    motion?: boolean | null | undefined;
    /**
     * The URL of the motion MP4.
     */
    motionMp4URL?: string | null | undefined;
    /**
     * The name of the motion model.
     */
    motionModel?: string | null | undefined;
    /**
     * The motion strength.
     */
    motionStrength?: number | null | undefined;
    nsfw?: boolean | undefined;
    url?: string | undefined;
};

/**
 * Element used for the generation.
 */
export type Elements = {
    /**
     * Unique identifier for the element. Elements can be found from the List Elements endpoint.
     */
    akUUID?: string | null | undefined;
    /**
     * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5. Also includes SDXL and SDXL Lightning models
     */
    baseModel?: shared.SdVersions | undefined;
    /**
     * Description for the element
     */
    description?: string | null | undefined;
    /**
     * Name of the element
     */
    name?: string | null | undefined;
    /**
     * URL of the element image
     */
    urlImage?: string | null | undefined;
    /**
     * Default weight for the element
     */
    weightDefault?: number | null | undefined;
    /**
     * Maximum weight for the element
     */
    weightMax?: number | null | undefined;
    /**
     * Minimum weight for the element
     */
    weightMin?: number | null | undefined;
};

/**
 * This table captures the elements that are applied to a Generations, also the order and weightings used when applied.
 */
export type GetGenerationsByUserIdGenerationElements = {
    id?: number | null | undefined;
    /**
     * Element used for the generation.
     */
    lora?: Elements | null | undefined;
    weightApplied?: number | null | undefined;
};

/**
 * columns and relationships of "generations"
 */
export type GetGenerationsByUserIdGenerations = {
    createdAt?: string | undefined;
    generatedImages?: Array<GetGenerationsByUserIdGeneratedImages> | undefined;
    generationElements?: Array<GetGenerationsByUserIdGenerationElements> | undefined;
    guidanceScale?: number | null | undefined;
    id?: string | null | undefined;
    imageHeight?: number | undefined;
    imageWidth?: number | undefined;
    inferenceSteps?: number | null | undefined;
    initStrength?: number | null | undefined;
    modelId?: string | null | undefined;
    negativePrompt?: string | null | undefined;
    /**
     * If photoReal feature was used.
     */
    photoReal?: boolean | null | undefined;
    /**
     * Depth of field of photoReal used. 0.55 is low, 0.5 is medium, and 0.45 is high. Default is 0.55.
     */
    photoRealStrength?: number | null | undefined;
    /**
     * The style to generate images with. When photoReal is enabled, refer to the Guide section for a full list. When alchemy is disabled, use LEONARDO or NONE. When alchemy is enabled, use ANIME, CREATIVE, DYNAMIC, ENVIRONMENT, GENERAL, ILLUSTRATION, PHOTOGRAPHY, RAYTRACED, RENDER_3D, SKETCH_BW, SKETCH_COLOR, or NONE.
     */
    presetStyle?: shared.SdGenerationStyle | null | undefined;
    prompt?: string | undefined;
    /**
     * If prompt magic was used.
     */
    promptMagic?: boolean | null | undefined;
    /**
     * Strength of prompt magic used.
     */
    promptMagicStrength?: number | null | undefined;
    /**
     * Version of prompt magic used.
     */
    promptMagicVersion?: string | null | undefined;
    public?: boolean | undefined;
    /**
     * The scheduler to generate images with. Defaults to EULER_DISCRETE if not specified.
     */
    scheduler?: shared.SdGenerationSchedulers | undefined;
    /**
     * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5. Also includes SDXL and SDXL Lightning models
     */
    sdVersion?: shared.SdVersions | undefined;
    seed?: number | null | undefined;
    /**
     * The status of the current task.
     */
    status?: shared.JobStatus | undefined;
};

/**
 * Responses for GET /generations/user/{userId}
 */
export type GetGenerationsByUserIdResponseBody = {
    generations?: Array<GetGenerationsByUserIdGenerations> | undefined;
};

export type GetGenerationsByUserIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for GET /generations/user/{userId}
     */
    object?: GetGenerationsByUserIdResponseBody | undefined;
};

/** @internal */
export namespace GetGenerationsByUserIdRequest$ {
    export const inboundSchema: z.ZodType<GetGenerationsByUserIdRequest, z.ZodTypeDef, unknown> =
        z.object({
            limit: z.number().int().default(10),
            offset: z.number().int().default(0),
            userId: z.string(),
        });

    export type Outbound = {
        limit: number;
        offset: number;
        userId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetGenerationsByUserIdRequest> =
        z.object({
            limit: z.number().int().default(10),
            offset: z.number().int().default(0),
            userId: z.string(),
        });
}

/** @internal */
export namespace GetGenerationsByUserIdGeneratedImageVariationGeneric$ {
    export const inboundSchema: z.ZodType<
        GetGenerationsByUserIdGeneratedImageVariationGeneric,
        z.ZodTypeDef,
        unknown
    > = z.object({
        id: z.nullable(z.string()).optional(),
        status: shared.JobStatus$.inboundSchema.optional(),
        transformType: shared.VariationType$.inboundSchema.optional(),
        url: z.nullable(z.string()).optional(),
    });

    export type Outbound = {
        id?: string | null | undefined;
        status?: string | undefined;
        transformType?: string | undefined;
        url?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetGenerationsByUserIdGeneratedImageVariationGeneric
    > = z.object({
        id: z.nullable(z.string()).optional(),
        status: shared.JobStatus$.outboundSchema.optional(),
        transformType: shared.VariationType$.outboundSchema.optional(),
        url: z.nullable(z.string()).optional(),
    });
}

/** @internal */
export namespace GetGenerationsByUserIdGeneratedImages$ {
    export const inboundSchema: z.ZodType<
        GetGenerationsByUserIdGeneratedImages,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            generated_image_variation_generics: z
                .array(
                    z.lazy(
                        () => GetGenerationsByUserIdGeneratedImageVariationGeneric$.inboundSchema
                    )
                )
                .optional(),
            id: z.nullable(z.string()).optional(),
            imageToVideo: z.nullable(z.boolean()).optional(),
            likeCount: z.number().int().optional(),
            motion: z.nullable(z.boolean()).optional(),
            motionMP4URL: z.nullable(z.string()).optional(),
            motionModel: z.nullable(z.string()).optional(),
            motionStrength: z.nullable(z.number().int()).optional(),
            nsfw: z.boolean().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                generated_image_variation_generics: "generatedImageVariationGenerics",
                motionMP4URL: "motionMp4URL",
            });
        });

    export type Outbound = {
        generated_image_variation_generics?:
            | Array<GetGenerationsByUserIdGeneratedImageVariationGeneric$.Outbound>
            | undefined;
        id?: string | null | undefined;
        imageToVideo?: boolean | null | undefined;
        likeCount?: number | undefined;
        motion?: boolean | null | undefined;
        motionMP4URL?: string | null | undefined;
        motionModel?: string | null | undefined;
        motionStrength?: number | null | undefined;
        nsfw?: boolean | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetGenerationsByUserIdGeneratedImages
    > = z
        .object({
            generatedImageVariationGenerics: z
                .array(
                    z.lazy(
                        () => GetGenerationsByUserIdGeneratedImageVariationGeneric$.outboundSchema
                    )
                )
                .optional(),
            id: z.nullable(z.string()).optional(),
            imageToVideo: z.nullable(z.boolean()).optional(),
            likeCount: z.number().int().optional(),
            motion: z.nullable(z.boolean()).optional(),
            motionMp4URL: z.nullable(z.string()).optional(),
            motionModel: z.nullable(z.string()).optional(),
            motionStrength: z.nullable(z.number().int()).optional(),
            nsfw: z.boolean().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                generatedImageVariationGenerics: "generated_image_variation_generics",
                motionMp4URL: "motionMP4URL",
            });
        });
}

/** @internal */
export namespace Elements$ {
    export const inboundSchema: z.ZodType<Elements, z.ZodTypeDef, unknown> = z.object({
        akUUID: z.nullable(z.string()).optional(),
        baseModel: shared.SdVersions$.inboundSchema.optional(),
        description: z.nullable(z.string()).optional(),
        name: z.nullable(z.string()).optional(),
        urlImage: z.nullable(z.string()).optional(),
        weightDefault: z.nullable(z.number().int()).optional(),
        weightMax: z.nullable(z.number().int()).optional(),
        weightMin: z.nullable(z.number().int()).optional(),
    });

    export type Outbound = {
        akUUID?: string | null | undefined;
        baseModel?: string | undefined;
        description?: string | null | undefined;
        name?: string | null | undefined;
        urlImage?: string | null | undefined;
        weightDefault?: number | null | undefined;
        weightMax?: number | null | undefined;
        weightMin?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Elements> = z.object({
        akUUID: z.nullable(z.string()).optional(),
        baseModel: shared.SdVersions$.outboundSchema.optional(),
        description: z.nullable(z.string()).optional(),
        name: z.nullable(z.string()).optional(),
        urlImage: z.nullable(z.string()).optional(),
        weightDefault: z.nullable(z.number().int()).optional(),
        weightMax: z.nullable(z.number().int()).optional(),
        weightMin: z.nullable(z.number().int()).optional(),
    });
}

/** @internal */
export namespace GetGenerationsByUserIdGenerationElements$ {
    export const inboundSchema: z.ZodType<
        GetGenerationsByUserIdGenerationElements,
        z.ZodTypeDef,
        unknown
    > = z.object({
        id: z.nullable(z.number().int()).optional(),
        lora: z.nullable(z.lazy(() => Elements$.inboundSchema)).optional(),
        weightApplied: z.nullable(z.number()).optional(),
    });

    export type Outbound = {
        id?: number | null | undefined;
        lora?: Elements$.Outbound | null | undefined;
        weightApplied?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetGenerationsByUserIdGenerationElements
    > = z.object({
        id: z.nullable(z.number().int()).optional(),
        lora: z.nullable(z.lazy(() => Elements$.outboundSchema)).optional(),
        weightApplied: z.nullable(z.number()).optional(),
    });
}

/** @internal */
export namespace GetGenerationsByUserIdGenerations$ {
    export const inboundSchema: z.ZodType<
        GetGenerationsByUserIdGenerations,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            createdAt: z.string().optional(),
            generated_images: z
                .array(z.lazy(() => GetGenerationsByUserIdGeneratedImages$.inboundSchema))
                .optional(),
            generation_elements: z
                .array(z.lazy(() => GetGenerationsByUserIdGenerationElements$.inboundSchema))
                .optional(),
            guidanceScale: z.nullable(z.number()).optional(),
            id: z.nullable(z.string()).optional(),
            imageHeight: z.number().int().optional(),
            imageWidth: z.number().int().optional(),
            inferenceSteps: z.nullable(z.number().int()).optional(),
            initStrength: z.nullable(z.number()).optional(),
            modelId: z.nullable(z.string()).optional(),
            negativePrompt: z.nullable(z.string()).optional(),
            photoReal: z.nullable(z.boolean()).optional(),
            photoRealStrength: z.nullable(z.number()).optional(),
            presetStyle: z.nullable(
                shared.SdGenerationStyle$.inboundSchema.default(shared.SdGenerationStyle.Dynamic)
            ),
            prompt: z.string().optional(),
            promptMagic: z.nullable(z.boolean()).optional(),
            promptMagicStrength: z.nullable(z.number()).optional(),
            promptMagicVersion: z.nullable(z.string()).optional(),
            public: z.boolean().optional(),
            scheduler: shared.SdGenerationSchedulers$.inboundSchema.optional(),
            sdVersion: shared.SdVersions$.inboundSchema.optional(),
            seed: z.nullable(z.number().int()).optional(),
            status: shared.JobStatus$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                generated_images: "generatedImages",
                generation_elements: "generationElements",
            });
        });

    export type Outbound = {
        createdAt?: string | undefined;
        generated_images?: Array<GetGenerationsByUserIdGeneratedImages$.Outbound> | undefined;
        generation_elements?: Array<GetGenerationsByUserIdGenerationElements$.Outbound> | undefined;
        guidanceScale?: number | null | undefined;
        id?: string | null | undefined;
        imageHeight?: number | undefined;
        imageWidth?: number | undefined;
        inferenceSteps?: number | null | undefined;
        initStrength?: number | null | undefined;
        modelId?: string | null | undefined;
        negativePrompt?: string | null | undefined;
        photoReal?: boolean | null | undefined;
        photoRealStrength?: number | null | undefined;
        presetStyle: string | null;
        prompt?: string | undefined;
        promptMagic?: boolean | null | undefined;
        promptMagicStrength?: number | null | undefined;
        promptMagicVersion?: string | null | undefined;
        public?: boolean | undefined;
        scheduler?: string | undefined;
        sdVersion?: string | undefined;
        seed?: number | null | undefined;
        status?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetGenerationsByUserIdGenerations
    > = z
        .object({
            createdAt: z.string().optional(),
            generatedImages: z
                .array(z.lazy(() => GetGenerationsByUserIdGeneratedImages$.outboundSchema))
                .optional(),
            generationElements: z
                .array(z.lazy(() => GetGenerationsByUserIdGenerationElements$.outboundSchema))
                .optional(),
            guidanceScale: z.nullable(z.number()).optional(),
            id: z.nullable(z.string()).optional(),
            imageHeight: z.number().int().optional(),
            imageWidth: z.number().int().optional(),
            inferenceSteps: z.nullable(z.number().int()).optional(),
            initStrength: z.nullable(z.number()).optional(),
            modelId: z.nullable(z.string()).optional(),
            negativePrompt: z.nullable(z.string()).optional(),
            photoReal: z.nullable(z.boolean()).optional(),
            photoRealStrength: z.nullable(z.number()).optional(),
            presetStyle: z.nullable(
                shared.SdGenerationStyle$.outboundSchema.default(shared.SdGenerationStyle.Dynamic)
            ),
            prompt: z.string().optional(),
            promptMagic: z.nullable(z.boolean()).optional(),
            promptMagicStrength: z.nullable(z.number()).optional(),
            promptMagicVersion: z.nullable(z.string()).optional(),
            public: z.boolean().optional(),
            scheduler: shared.SdGenerationSchedulers$.outboundSchema.optional(),
            sdVersion: shared.SdVersions$.outboundSchema.optional(),
            seed: z.nullable(z.number().int()).optional(),
            status: shared.JobStatus$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                generatedImages: "generated_images",
                generationElements: "generation_elements",
            });
        });
}

/** @internal */
export namespace GetGenerationsByUserIdResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetGenerationsByUserIdResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        generations: z
            .array(z.lazy(() => GetGenerationsByUserIdGenerations$.inboundSchema))
            .optional(),
    });

    export type Outbound = {
        generations?: Array<GetGenerationsByUserIdGenerations$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetGenerationsByUserIdResponseBody
    > = z.object({
        generations: z
            .array(z.lazy(() => GetGenerationsByUserIdGenerations$.outboundSchema))
            .optional(),
    });
}

/** @internal */
export namespace GetGenerationsByUserIdResponse$ {
    export const inboundSchema: z.ZodType<GetGenerationsByUserIdResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetGenerationsByUserIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetGenerationsByUserIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetGenerationsByUserIdResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                object: z.lazy(() => GetGenerationsByUserIdResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    contentType: "ContentType",
                    statusCode: "StatusCode",
                    rawResponse: "RawResponse",
                });
            });
}
