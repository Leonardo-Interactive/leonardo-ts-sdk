/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type DeleteModelByIdRequest = {
    /**
     * The ID of the model to delete.
     */
    id: string;
};

/**
 * columns and relationships of "custom_models"
 */
export type CustomModels = {
    id?: string | null | undefined;
};

/**
 * Responses for DELETE /models/{id}
 */
export type DeleteModelByIdResponseBody = {
    /**
     * columns and relationships of "custom_models"
     */
    deleteCustomModelsByPk?: CustomModels | null | undefined;
};

export type DeleteModelByIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for DELETE /models/{id}
     */
    object?: DeleteModelByIdResponseBody | undefined;
};

/** @internal */
export namespace DeleteModelByIdRequest$ {
    export const inboundSchema: z.ZodType<DeleteModelByIdRequest, z.ZodTypeDef, unknown> = z.object(
        {
            id: z.string(),
        }
    );

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteModelByIdRequest> =
        z.object({
            id: z.string(),
        });
}

/** @internal */
export namespace CustomModels$ {
    export const inboundSchema: z.ZodType<CustomModels, z.ZodTypeDef, unknown> = z.object({
        id: z.nullable(z.string()).optional(),
    });

    export type Outbound = {
        id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomModels> = z.object({
        id: z.nullable(z.string()).optional(),
    });
}

/** @internal */
export namespace DeleteModelByIdResponseBody$ {
    export const inboundSchema: z.ZodType<DeleteModelByIdResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            delete_custom_models_by_pk: z
                .nullable(z.lazy(() => CustomModels$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                delete_custom_models_by_pk: "deleteCustomModelsByPk",
            });
        });

    export type Outbound = {
        delete_custom_models_by_pk?: CustomModels$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteModelByIdResponseBody> = z
        .object({
            deleteCustomModelsByPk: z
                .nullable(z.lazy(() => CustomModels$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                deleteCustomModelsByPk: "delete_custom_models_by_pk",
            });
        });
}

/** @internal */
export namespace DeleteModelByIdResponse$ {
    export const inboundSchema: z.ZodType<DeleteModelByIdResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => DeleteModelByIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: DeleteModelByIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteModelByIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => DeleteModelByIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
