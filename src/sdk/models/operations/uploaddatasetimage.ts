/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Query parameters provided in the request body as a JSON object
 */
export type UploadDatasetImageRequestBody = {
  /**
   * Has to be png, jpg, jpeg, or webp.
   */
  extension: string;
};

export type UploadDatasetImageRequest = {
  /**
   * Query parameters provided in the request body as a JSON object
   */
  requestBody: UploadDatasetImageRequestBody;
  /**
   * _"datasetId" is required
   */
  datasetId: string;
};

export type DatasetUploadOutput = {
  fields?: string | null | undefined;
  id?: string | null | undefined;
  key?: string | null | undefined;
  url?: string | null | undefined;
};

/**
 * Responses for POST /datasets/{datasetId}/upload
 */
export type UploadDatasetImageResponseBody = {
  uploadDatasetImage?: DatasetUploadOutput | null | undefined;
};

export type UploadDatasetImageResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for POST /datasets/{datasetId}/upload
   */
  object?: UploadDatasetImageResponseBody | undefined;
};

/** @internal */
export const UploadDatasetImageRequestBody$inboundSchema: z.ZodType<
  UploadDatasetImageRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  extension: z.string(),
});

/** @internal */
export type UploadDatasetImageRequestBody$Outbound = {
  extension: string;
};

/** @internal */
export const UploadDatasetImageRequestBody$outboundSchema: z.ZodType<
  UploadDatasetImageRequestBody$Outbound,
  z.ZodTypeDef,
  UploadDatasetImageRequestBody
> = z.object({
  extension: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDatasetImageRequestBody$ {
  /** @deprecated use `UploadDatasetImageRequestBody$inboundSchema` instead. */
  export const inboundSchema = UploadDatasetImageRequestBody$inboundSchema;
  /** @deprecated use `UploadDatasetImageRequestBody$outboundSchema` instead. */
  export const outboundSchema = UploadDatasetImageRequestBody$outboundSchema;
  /** @deprecated use `UploadDatasetImageRequestBody$Outbound` instead. */
  export type Outbound = UploadDatasetImageRequestBody$Outbound;
}

export function uploadDatasetImageRequestBodyToJSON(
  uploadDatasetImageRequestBody: UploadDatasetImageRequestBody,
): string {
  return JSON.stringify(
    UploadDatasetImageRequestBody$outboundSchema.parse(
      uploadDatasetImageRequestBody,
    ),
  );
}

export function uploadDatasetImageRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadDatasetImageRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadDatasetImageRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadDatasetImageRequestBody' from JSON`,
  );
}

/** @internal */
export const UploadDatasetImageRequest$inboundSchema: z.ZodType<
  UploadDatasetImageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => UploadDatasetImageRequestBody$inboundSchema),
  datasetId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UploadDatasetImageRequest$Outbound = {
  RequestBody: UploadDatasetImageRequestBody$Outbound;
  datasetId: string;
};

/** @internal */
export const UploadDatasetImageRequest$outboundSchema: z.ZodType<
  UploadDatasetImageRequest$Outbound,
  z.ZodTypeDef,
  UploadDatasetImageRequest
> = z.object({
  requestBody: z.lazy(() => UploadDatasetImageRequestBody$outboundSchema),
  datasetId: z.string(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDatasetImageRequest$ {
  /** @deprecated use `UploadDatasetImageRequest$inboundSchema` instead. */
  export const inboundSchema = UploadDatasetImageRequest$inboundSchema;
  /** @deprecated use `UploadDatasetImageRequest$outboundSchema` instead. */
  export const outboundSchema = UploadDatasetImageRequest$outboundSchema;
  /** @deprecated use `UploadDatasetImageRequest$Outbound` instead. */
  export type Outbound = UploadDatasetImageRequest$Outbound;
}

export function uploadDatasetImageRequestToJSON(
  uploadDatasetImageRequest: UploadDatasetImageRequest,
): string {
  return JSON.stringify(
    UploadDatasetImageRequest$outboundSchema.parse(uploadDatasetImageRequest),
  );
}

export function uploadDatasetImageRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadDatasetImageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadDatasetImageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadDatasetImageRequest' from JSON`,
  );
}

/** @internal */
export const DatasetUploadOutput$inboundSchema: z.ZodType<
  DatasetUploadOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  key: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
});

/** @internal */
export type DatasetUploadOutput$Outbound = {
  fields?: string | null | undefined;
  id?: string | null | undefined;
  key?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const DatasetUploadOutput$outboundSchema: z.ZodType<
  DatasetUploadOutput$Outbound,
  z.ZodTypeDef,
  DatasetUploadOutput
> = z.object({
  fields: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  key: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatasetUploadOutput$ {
  /** @deprecated use `DatasetUploadOutput$inboundSchema` instead. */
  export const inboundSchema = DatasetUploadOutput$inboundSchema;
  /** @deprecated use `DatasetUploadOutput$outboundSchema` instead. */
  export const outboundSchema = DatasetUploadOutput$outboundSchema;
  /** @deprecated use `DatasetUploadOutput$Outbound` instead. */
  export type Outbound = DatasetUploadOutput$Outbound;
}

export function datasetUploadOutputToJSON(
  datasetUploadOutput: DatasetUploadOutput,
): string {
  return JSON.stringify(
    DatasetUploadOutput$outboundSchema.parse(datasetUploadOutput),
  );
}

export function datasetUploadOutputFromJSON(
  jsonString: string,
): SafeParseResult<DatasetUploadOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DatasetUploadOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DatasetUploadOutput' from JSON`,
  );
}

/** @internal */
export const UploadDatasetImageResponseBody$inboundSchema: z.ZodType<
  UploadDatasetImageResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uploadDatasetImage: z.nullable(
    z.lazy(() => DatasetUploadOutput$inboundSchema),
  ).optional(),
});

/** @internal */
export type UploadDatasetImageResponseBody$Outbound = {
  uploadDatasetImage?: DatasetUploadOutput$Outbound | null | undefined;
};

/** @internal */
export const UploadDatasetImageResponseBody$outboundSchema: z.ZodType<
  UploadDatasetImageResponseBody$Outbound,
  z.ZodTypeDef,
  UploadDatasetImageResponseBody
> = z.object({
  uploadDatasetImage: z.nullable(
    z.lazy(() => DatasetUploadOutput$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDatasetImageResponseBody$ {
  /** @deprecated use `UploadDatasetImageResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadDatasetImageResponseBody$inboundSchema;
  /** @deprecated use `UploadDatasetImageResponseBody$outboundSchema` instead. */
  export const outboundSchema = UploadDatasetImageResponseBody$outboundSchema;
  /** @deprecated use `UploadDatasetImageResponseBody$Outbound` instead. */
  export type Outbound = UploadDatasetImageResponseBody$Outbound;
}

export function uploadDatasetImageResponseBodyToJSON(
  uploadDatasetImageResponseBody: UploadDatasetImageResponseBody,
): string {
  return JSON.stringify(
    UploadDatasetImageResponseBody$outboundSchema.parse(
      uploadDatasetImageResponseBody,
    ),
  );
}

export function uploadDatasetImageResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadDatasetImageResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadDatasetImageResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadDatasetImageResponseBody' from JSON`,
  );
}

/** @internal */
export const UploadDatasetImageResponse$inboundSchema: z.ZodType<
  UploadDatasetImageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => UploadDatasetImageResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type UploadDatasetImageResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: UploadDatasetImageResponseBody$Outbound | undefined;
};

/** @internal */
export const UploadDatasetImageResponse$outboundSchema: z.ZodType<
  UploadDatasetImageResponse$Outbound,
  z.ZodTypeDef,
  UploadDatasetImageResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => UploadDatasetImageResponseBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDatasetImageResponse$ {
  /** @deprecated use `UploadDatasetImageResponse$inboundSchema` instead. */
  export const inboundSchema = UploadDatasetImageResponse$inboundSchema;
  /** @deprecated use `UploadDatasetImageResponse$outboundSchema` instead. */
  export const outboundSchema = UploadDatasetImageResponse$outboundSchema;
  /** @deprecated use `UploadDatasetImageResponse$Outbound` instead. */
  export type Outbound = UploadDatasetImageResponse$Outbound;
}

export function uploadDatasetImageResponseToJSON(
  uploadDatasetImageResponse: UploadDatasetImageResponse,
): string {
  return JSON.stringify(
    UploadDatasetImageResponse$outboundSchema.parse(uploadDatasetImageResponse),
  );
}

export function uploadDatasetImageResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadDatasetImageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadDatasetImageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadDatasetImageResponse' from JSON`,
  );
}
