/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

/**
 * Query parameters can also be provided in the request body as a JSON object
 */
export type CreateSVDMotionGenerationRequestBody = {
    /**
     * The ID of the image, supports generated images, variation images, and init images.
     */
    imageId: string;
    /**
     * If it is an init image uploaded by the user. This image is uploaded from endpoint: Upload init image.
     */
    isInitImage?: boolean | null | undefined;
    /**
     * Whether the generation is public or not
     */
    isPublic?: boolean | null | undefined;
    /**
     * If it is a variation image.
     */
    isVariation?: boolean | null | undefined;
    /**
     * The motion strength.
     */
    motionStrength?: number | null | undefined;
};

export type MotionSvdGenerationOutput = {
    /**
     * API credits cost, available for Production API users.
     */
    apiCreditCost?: number | null | undefined;
    generationId?: string | undefined;
};

/**
 * Responses for POST /generations-motion-svd
 */
export type CreateSVDMotionGenerationResponseBody = {
    sdGenerationJob?: MotionSvdGenerationOutput | null | undefined;
};

export type CreateSVDMotionGenerationResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /generations-motion-svd
     */
    object?: CreateSVDMotionGenerationResponseBody | undefined;
};

/** @internal */
export namespace CreateSVDMotionGenerationRequestBody$ {
    export const inboundSchema: z.ZodType<
        CreateSVDMotionGenerationRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        imageId: z.string(),
        isInitImage: z.nullable(z.boolean()).optional(),
        isPublic: z.nullable(z.boolean()).optional(),
        isVariation: z.nullable(z.boolean()).optional(),
        motionStrength: z.nullable(z.number().int()).optional(),
    });

    export type Outbound = {
        imageId: string;
        isInitImage?: boolean | null | undefined;
        isPublic?: boolean | null | undefined;
        isVariation?: boolean | null | undefined;
        motionStrength?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateSVDMotionGenerationRequestBody
    > = z.object({
        imageId: z.string(),
        isInitImage: z.nullable(z.boolean()).optional(),
        isPublic: z.nullable(z.boolean()).optional(),
        isVariation: z.nullable(z.boolean()).optional(),
        motionStrength: z.nullable(z.number().int()).optional(),
    });
}

/** @internal */
export namespace MotionSvdGenerationOutput$ {
    export const inboundSchema: z.ZodType<MotionSvdGenerationOutput, z.ZodTypeDef, unknown> =
        z.object({
            apiCreditCost: z.nullable(z.number().int()).optional(),
            generationId: z.string().optional(),
        });

    export type Outbound = {
        apiCreditCost?: number | null | undefined;
        generationId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MotionSvdGenerationOutput> =
        z.object({
            apiCreditCost: z.nullable(z.number().int()).optional(),
            generationId: z.string().optional(),
        });
}

/** @internal */
export namespace CreateSVDMotionGenerationResponseBody$ {
    export const inboundSchema: z.ZodType<
        CreateSVDMotionGenerationResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        sdGenerationJob: z
            .nullable(z.lazy(() => MotionSvdGenerationOutput$.inboundSchema))
            .optional(),
    });

    export type Outbound = {
        sdGenerationJob?: MotionSvdGenerationOutput$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateSVDMotionGenerationResponseBody
    > = z.object({
        sdGenerationJob: z
            .nullable(z.lazy(() => MotionSvdGenerationOutput$.outboundSchema))
            .optional(),
    });
}

/** @internal */
export namespace CreateSVDMotionGenerationResponse$ {
    export const inboundSchema: z.ZodType<
        CreateSVDMotionGenerationResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => CreateSVDMotionGenerationResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: CreateSVDMotionGenerationResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateSVDMotionGenerationResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => CreateSVDMotionGenerationResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
