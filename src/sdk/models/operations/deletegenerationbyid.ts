/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteGenerationByIdRequest = {
  /**
   * The ID of the generation to delete.
   */
  id: string;
};

/**
 * columns and relationships of "generations"
 */
export type Generations = {
  id?: string | null | undefined;
};

/**
 * Responses for DELETE /generations/{id}
 */
export type DeleteGenerationByIdResponseBody = {
  /**
   * columns and relationships of "generations"
   */
  deleteGenerationsByPk?: Generations | null | undefined;
};

export type DeleteGenerationByIdResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for DELETE /generations/{id}
   */
  object?: DeleteGenerationByIdResponseBody | undefined;
};

/** @internal */
export const DeleteGenerationByIdRequest$inboundSchema: z.ZodType<
  DeleteGenerationByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteGenerationByIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteGenerationByIdRequest$outboundSchema: z.ZodType<
  DeleteGenerationByIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteGenerationByIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteGenerationByIdRequest$ {
  /** @deprecated use `DeleteGenerationByIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteGenerationByIdRequest$inboundSchema;
  /** @deprecated use `DeleteGenerationByIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteGenerationByIdRequest$outboundSchema;
  /** @deprecated use `DeleteGenerationByIdRequest$Outbound` instead. */
  export type Outbound = DeleteGenerationByIdRequest$Outbound;
}

export function deleteGenerationByIdRequestToJSON(
  deleteGenerationByIdRequest: DeleteGenerationByIdRequest,
): string {
  return JSON.stringify(
    DeleteGenerationByIdRequest$outboundSchema.parse(
      deleteGenerationByIdRequest,
    ),
  );
}

export function deleteGenerationByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteGenerationByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteGenerationByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteGenerationByIdRequest' from JSON`,
  );
}

/** @internal */
export const Generations$inboundSchema: z.ZodType<
  Generations,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type Generations$Outbound = {
  id?: string | null | undefined;
};

/** @internal */
export const Generations$outboundSchema: z.ZodType<
  Generations$Outbound,
  z.ZodTypeDef,
  Generations
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Generations$ {
  /** @deprecated use `Generations$inboundSchema` instead. */
  export const inboundSchema = Generations$inboundSchema;
  /** @deprecated use `Generations$outboundSchema` instead. */
  export const outboundSchema = Generations$outboundSchema;
  /** @deprecated use `Generations$Outbound` instead. */
  export type Outbound = Generations$Outbound;
}

export function generationsToJSON(generations: Generations): string {
  return JSON.stringify(Generations$outboundSchema.parse(generations));
}

export function generationsFromJSON(
  jsonString: string,
): SafeParseResult<Generations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Generations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Generations' from JSON`,
  );
}

/** @internal */
export const DeleteGenerationByIdResponseBody$inboundSchema: z.ZodType<
  DeleteGenerationByIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  delete_generations_by_pk: z.nullable(z.lazy(() => Generations$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "delete_generations_by_pk": "deleteGenerationsByPk",
  });
});

/** @internal */
export type DeleteGenerationByIdResponseBody$Outbound = {
  delete_generations_by_pk?: Generations$Outbound | null | undefined;
};

/** @internal */
export const DeleteGenerationByIdResponseBody$outboundSchema: z.ZodType<
  DeleteGenerationByIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteGenerationByIdResponseBody
> = z.object({
  deleteGenerationsByPk: z.nullable(z.lazy(() => Generations$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    deleteGenerationsByPk: "delete_generations_by_pk",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteGenerationByIdResponseBody$ {
  /** @deprecated use `DeleteGenerationByIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteGenerationByIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteGenerationByIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteGenerationByIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteGenerationByIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteGenerationByIdResponseBody$Outbound;
}

export function deleteGenerationByIdResponseBodyToJSON(
  deleteGenerationByIdResponseBody: DeleteGenerationByIdResponseBody,
): string {
  return JSON.stringify(
    DeleteGenerationByIdResponseBody$outboundSchema.parse(
      deleteGenerationByIdResponseBody,
    ),
  );
}

export function deleteGenerationByIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteGenerationByIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteGenerationByIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteGenerationByIdResponseBody' from JSON`,
  );
}

/** @internal */
export const DeleteGenerationByIdResponse$inboundSchema: z.ZodType<
  DeleteGenerationByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => DeleteGenerationByIdResponseBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DeleteGenerationByIdResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: DeleteGenerationByIdResponseBody$Outbound | undefined;
};

/** @internal */
export const DeleteGenerationByIdResponse$outboundSchema: z.ZodType<
  DeleteGenerationByIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteGenerationByIdResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => DeleteGenerationByIdResponseBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteGenerationByIdResponse$ {
  /** @deprecated use `DeleteGenerationByIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteGenerationByIdResponse$inboundSchema;
  /** @deprecated use `DeleteGenerationByIdResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteGenerationByIdResponse$outboundSchema;
  /** @deprecated use `DeleteGenerationByIdResponse$Outbound` instead. */
  export type Outbound = DeleteGenerationByIdResponse$Outbound;
}

export function deleteGenerationByIdResponseToJSON(
  deleteGenerationByIdResponse: DeleteGenerationByIdResponse,
): string {
  return JSON.stringify(
    DeleteGenerationByIdResponse$outboundSchema.parse(
      deleteGenerationByIdResponse,
    ),
  );
}

export function deleteGenerationByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteGenerationByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteGenerationByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteGenerationByIdResponse' from JSON`,
  );
}
