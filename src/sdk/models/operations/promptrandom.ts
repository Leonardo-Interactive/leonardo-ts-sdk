/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export type PromptRandomPromptGenerationOutput = {
    /**
     * API Credits Cost for Random Prompt Generation. Available for Production API Users.
     */
    apiCreditCost?: number | undefined;
    /**
     * The random prompt generated.
     */
    prompt?: string | undefined;
};

/**
 * Responses for POST /prompt/random
 */
export type PromptRandomResponseBody = {
    promptGeneration?: PromptRandomPromptGenerationOutput | undefined;
};

export type PromptRandomResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Responses for POST /prompt/random
     */
    object?: PromptRandomResponseBody | undefined;
};

/** @internal */
export namespace PromptRandomPromptGenerationOutput$ {
    export const inboundSchema: z.ZodType<
        PromptRandomPromptGenerationOutput,
        z.ZodTypeDef,
        unknown
    > = z.object({
        apiCreditCost: z.number().int().default(4),
        prompt: z.string().default("The random prompt generated."),
    });

    export type Outbound = {
        apiCreditCost: number;
        prompt: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PromptRandomPromptGenerationOutput
    > = z.object({
        apiCreditCost: z.number().int().default(4),
        prompt: z.string().default("The random prompt generated."),
    });
}

/** @internal */
export namespace PromptRandomResponseBody$ {
    export const inboundSchema: z.ZodType<PromptRandomResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            promptGeneration: z
                .lazy(() => PromptRandomPromptGenerationOutput$.inboundSchema)
                .optional(),
        });

    export type Outbound = {
        promptGeneration?: PromptRandomPromptGenerationOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PromptRandomResponseBody> =
        z.object({
            promptGeneration: z
                .lazy(() => PromptRandomPromptGenerationOutput$.outboundSchema)
                .optional(),
        });
}

/** @internal */
export namespace PromptRandomResponse$ {
    export const inboundSchema: z.ZodType<PromptRandomResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PromptRandomResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PromptRandomResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PromptRandomResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PromptRandomResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
