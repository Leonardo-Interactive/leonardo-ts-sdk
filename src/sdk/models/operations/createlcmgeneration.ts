/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Query parameters can also be provided in the request body as a JSON object
 */
export type CreateLCMGenerationRequestBody = {
  /**
   * How strongly the generation should reflect the prompt. Must be a float between 0.5 and 20.
   */
  guidance?: number | null | undefined;
  /**
   * The output width of the image. Must be 512, 640 or 1024.
   */
  height?: number | null | undefined;
  /**
   * Image data used to generate image. In base64 format. Prefix: `data:image/jpeg;base64,`
   */
  imageDataUrl: string;
  /**
   * The prompt used to generate images
   */
  prompt: string;
  requestTimestamp?: string | undefined;
  seed?: number | null | undefined;
  /**
   * The number of steps to use for the generation. Must be between 4 and 16.
   */
  steps?: number | null | undefined;
  /**
   * Creativity strength of generation. Higher strength will deviate more from the original image supplied in imageDataUrl. Must be a float between 0.1 and 1.
   */
  strength?: number | null | undefined;
  /**
   * The style to generate LCM images with.
   */
  style?: shared.LcmGenerationStyle | null | undefined;
  /**
   * The output width of the image. Must be 512, 640 or 1024.
   */
  width?: number | null | undefined;
};

export type LcmGenerationOutput = {
  /**
   * API credits cost, available for Production API users.
   */
  apiCreditCost?: number | null | undefined;
  imageDataUrl?: Array<string> | undefined;
  requestTimestamp?: string | undefined;
};

/**
 * Responses for POST /generations-lcm
 */
export type CreateLCMGenerationResponseBody = {
  lcmGenerationJob?: LcmGenerationOutput | null | undefined;
};

export type CreateLCMGenerationResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Responses for POST /generations-lcm
   */
  object?: CreateLCMGenerationResponseBody | undefined;
};

/** @internal */
export const CreateLCMGenerationRequestBody$inboundSchema: z.ZodType<
  CreateLCMGenerationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  guidance: z.nullable(z.number()).optional(),
  height: z.nullable(z.number().int().default(512)),
  imageDataUrl: z.string(),
  prompt: z.string(),
  requestTimestamp: z.string().optional(),
  seed: z.nullable(z.number().int()).optional(),
  steps: z.nullable(z.number().int()).optional(),
  strength: z.nullable(z.number()).optional(),
  style: z.nullable(shared.LcmGenerationStyle$inboundSchema).optional(),
  width: z.nullable(z.number().int().default(512)),
});

/** @internal */
export type CreateLCMGenerationRequestBody$Outbound = {
  guidance?: number | null | undefined;
  height: number | null;
  imageDataUrl: string;
  prompt: string;
  requestTimestamp?: string | undefined;
  seed?: number | null | undefined;
  steps?: number | null | undefined;
  strength?: number | null | undefined;
  style?: string | null | undefined;
  width: number | null;
};

/** @internal */
export const CreateLCMGenerationRequestBody$outboundSchema: z.ZodType<
  CreateLCMGenerationRequestBody$Outbound,
  z.ZodTypeDef,
  CreateLCMGenerationRequestBody
> = z.object({
  guidance: z.nullable(z.number()).optional(),
  height: z.nullable(z.number().int().default(512)),
  imageDataUrl: z.string(),
  prompt: z.string(),
  requestTimestamp: z.string().optional(),
  seed: z.nullable(z.number().int()).optional(),
  steps: z.nullable(z.number().int()).optional(),
  strength: z.nullable(z.number()).optional(),
  style: z.nullable(shared.LcmGenerationStyle$outboundSchema).optional(),
  width: z.nullable(z.number().int().default(512)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLCMGenerationRequestBody$ {
  /** @deprecated use `CreateLCMGenerationRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateLCMGenerationRequestBody$inboundSchema;
  /** @deprecated use `CreateLCMGenerationRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateLCMGenerationRequestBody$outboundSchema;
  /** @deprecated use `CreateLCMGenerationRequestBody$Outbound` instead. */
  export type Outbound = CreateLCMGenerationRequestBody$Outbound;
}

export function createLCMGenerationRequestBodyToJSON(
  createLCMGenerationRequestBody: CreateLCMGenerationRequestBody,
): string {
  return JSON.stringify(
    CreateLCMGenerationRequestBody$outboundSchema.parse(
      createLCMGenerationRequestBody,
    ),
  );
}

export function createLCMGenerationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateLCMGenerationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLCMGenerationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLCMGenerationRequestBody' from JSON`,
  );
}

/** @internal */
export const LcmGenerationOutput$inboundSchema: z.ZodType<
  LcmGenerationOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiCreditCost: z.nullable(z.number().int()).optional(),
  imageDataUrl: z.array(z.string()).optional(),
  requestTimestamp: z.string().optional(),
});

/** @internal */
export type LcmGenerationOutput$Outbound = {
  apiCreditCost?: number | null | undefined;
  imageDataUrl?: Array<string> | undefined;
  requestTimestamp?: string | undefined;
};

/** @internal */
export const LcmGenerationOutput$outboundSchema: z.ZodType<
  LcmGenerationOutput$Outbound,
  z.ZodTypeDef,
  LcmGenerationOutput
> = z.object({
  apiCreditCost: z.nullable(z.number().int()).optional(),
  imageDataUrl: z.array(z.string()).optional(),
  requestTimestamp: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LcmGenerationOutput$ {
  /** @deprecated use `LcmGenerationOutput$inboundSchema` instead. */
  export const inboundSchema = LcmGenerationOutput$inboundSchema;
  /** @deprecated use `LcmGenerationOutput$outboundSchema` instead. */
  export const outboundSchema = LcmGenerationOutput$outboundSchema;
  /** @deprecated use `LcmGenerationOutput$Outbound` instead. */
  export type Outbound = LcmGenerationOutput$Outbound;
}

export function lcmGenerationOutputToJSON(
  lcmGenerationOutput: LcmGenerationOutput,
): string {
  return JSON.stringify(
    LcmGenerationOutput$outboundSchema.parse(lcmGenerationOutput),
  );
}

export function lcmGenerationOutputFromJSON(
  jsonString: string,
): SafeParseResult<LcmGenerationOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LcmGenerationOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LcmGenerationOutput' from JSON`,
  );
}

/** @internal */
export const CreateLCMGenerationResponseBody$inboundSchema: z.ZodType<
  CreateLCMGenerationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  lcmGenerationJob: z.nullable(z.lazy(() => LcmGenerationOutput$inboundSchema))
    .optional(),
});

/** @internal */
export type CreateLCMGenerationResponseBody$Outbound = {
  lcmGenerationJob?: LcmGenerationOutput$Outbound | null | undefined;
};

/** @internal */
export const CreateLCMGenerationResponseBody$outboundSchema: z.ZodType<
  CreateLCMGenerationResponseBody$Outbound,
  z.ZodTypeDef,
  CreateLCMGenerationResponseBody
> = z.object({
  lcmGenerationJob: z.nullable(z.lazy(() => LcmGenerationOutput$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLCMGenerationResponseBody$ {
  /** @deprecated use `CreateLCMGenerationResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateLCMGenerationResponseBody$inboundSchema;
  /** @deprecated use `CreateLCMGenerationResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateLCMGenerationResponseBody$outboundSchema;
  /** @deprecated use `CreateLCMGenerationResponseBody$Outbound` instead. */
  export type Outbound = CreateLCMGenerationResponseBody$Outbound;
}

export function createLCMGenerationResponseBodyToJSON(
  createLCMGenerationResponseBody: CreateLCMGenerationResponseBody,
): string {
  return JSON.stringify(
    CreateLCMGenerationResponseBody$outboundSchema.parse(
      createLCMGenerationResponseBody,
    ),
  );
}

export function createLCMGenerationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateLCMGenerationResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLCMGenerationResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLCMGenerationResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateLCMGenerationResponse$inboundSchema: z.ZodType<
  CreateLCMGenerationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => CreateLCMGenerationResponseBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type CreateLCMGenerationResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: CreateLCMGenerationResponseBody$Outbound | undefined;
};

/** @internal */
export const CreateLCMGenerationResponse$outboundSchema: z.ZodType<
  CreateLCMGenerationResponse$Outbound,
  z.ZodTypeDef,
  CreateLCMGenerationResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => CreateLCMGenerationResponseBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLCMGenerationResponse$ {
  /** @deprecated use `CreateLCMGenerationResponse$inboundSchema` instead. */
  export const inboundSchema = CreateLCMGenerationResponse$inboundSchema;
  /** @deprecated use `CreateLCMGenerationResponse$outboundSchema` instead. */
  export const outboundSchema = CreateLCMGenerationResponse$outboundSchema;
  /** @deprecated use `CreateLCMGenerationResponse$Outbound` instead. */
  export type Outbound = CreateLCMGenerationResponse$Outbound;
}

export function createLCMGenerationResponseToJSON(
  createLCMGenerationResponse: CreateLCMGenerationResponse,
): string {
  return JSON.stringify(
    CreateLCMGenerationResponse$outboundSchema.parse(
      createLCMGenerationResponse,
    ),
  );
}

export function createLCMGenerationResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateLCMGenerationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLCMGenerationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLCMGenerationResponse' from JSON`,
  );
}
