/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type indicating whether the init image is uploaded or generated.
 */
export enum InitImageType {
  Generated = "GENERATED",
  Uploaded = "UPLOADED",
}

/**
 * Strength type for the controlnet. Can only be used for Style, Character and Content Reference controlnets.
 */
export enum StrengthType {
  Low = "Low",
  Mid = "Mid",
  High = "High",
  Ultra = "Ultra",
  Max = "Max",
}

export type ControlnetInput = {
  /**
   * The ID of the init image
   */
  initImageId?: string | undefined;
  /**
   * Type indicating whether the init image is uploaded or generated.
   */
  initImageType?: InitImageType | undefined;
  /**
   * ID of the controlnet. A list of compatible IDs can be found in our guides.
   */
  preprocessorId?: number | undefined;
  /**
   * Strength type for the controlnet. Can only be used for Style, Character and Content Reference controlnets.
   */
  strengthType?: StrengthType | null | undefined;
  /**
   * Weight for the controlnet
   */
  weight?: number | null | undefined;
};

/** @internal */
export const InitImageType$inboundSchema: z.ZodNativeEnum<
  typeof InitImageType
> = z.nativeEnum(InitImageType);

/** @internal */
export const InitImageType$outboundSchema: z.ZodNativeEnum<
  typeof InitImageType
> = InitImageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitImageType$ {
  /** @deprecated use `InitImageType$inboundSchema` instead. */
  export const inboundSchema = InitImageType$inboundSchema;
  /** @deprecated use `InitImageType$outboundSchema` instead. */
  export const outboundSchema = InitImageType$outboundSchema;
}

/** @internal */
export const StrengthType$inboundSchema: z.ZodNativeEnum<typeof StrengthType> =
  z.nativeEnum(StrengthType);

/** @internal */
export const StrengthType$outboundSchema: z.ZodNativeEnum<typeof StrengthType> =
  StrengthType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StrengthType$ {
  /** @deprecated use `StrengthType$inboundSchema` instead. */
  export const inboundSchema = StrengthType$inboundSchema;
  /** @deprecated use `StrengthType$outboundSchema` instead. */
  export const outboundSchema = StrengthType$outboundSchema;
}

/** @internal */
export const ControlnetInput$inboundSchema: z.ZodType<
  ControlnetInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  initImageId: z.string().optional(),
  initImageType: InitImageType$inboundSchema.optional(),
  preprocessorId: z.number().optional(),
  strengthType: z.nullable(StrengthType$inboundSchema).optional(),
  weight: z.nullable(z.number()).optional(),
});

/** @internal */
export type ControlnetInput$Outbound = {
  initImageId?: string | undefined;
  initImageType?: string | undefined;
  preprocessorId?: number | undefined;
  strengthType?: string | null | undefined;
  weight?: number | null | undefined;
};

/** @internal */
export const ControlnetInput$outboundSchema: z.ZodType<
  ControlnetInput$Outbound,
  z.ZodTypeDef,
  ControlnetInput
> = z.object({
  initImageId: z.string().optional(),
  initImageType: InitImageType$outboundSchema.optional(),
  preprocessorId: z.number().optional(),
  strengthType: z.nullable(StrengthType$outboundSchema).optional(),
  weight: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ControlnetInput$ {
  /** @deprecated use `ControlnetInput$inboundSchema` instead. */
  export const inboundSchema = ControlnetInput$inboundSchema;
  /** @deprecated use `ControlnetInput$outboundSchema` instead. */
  export const outboundSchema = ControlnetInput$outboundSchema;
  /** @deprecated use `ControlnetInput$Outbound` instead. */
  export type Outbound = ControlnetInput$Outbound;
}

export function controlnetInputToJSON(
  controlnetInput: ControlnetInput,
): string {
  return JSON.stringify(ControlnetInput$outboundSchema.parse(controlnetInput));
}

export function controlnetInputFromJSON(
  jsonString: string,
): SafeParseResult<ControlnetInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ControlnetInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ControlnetInput' from JSON`,
  );
}
