/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserElementsInput = {
  /**
   * Unique identifier for user custom element.
   */
  userLoraId?: number | null | undefined;
  /**
   * Weight for the element
   */
  weight?: number | null | undefined;
};

/** @internal */
export const UserElementsInput$inboundSchema: z.ZodType<
  UserElementsInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  userLoraId: z.nullable(z.number()).optional(),
  weight: z.nullable(z.number()).optional(),
});

/** @internal */
export type UserElementsInput$Outbound = {
  userLoraId?: number | null | undefined;
  weight?: number | null | undefined;
};

/** @internal */
export const UserElementsInput$outboundSchema: z.ZodType<
  UserElementsInput$Outbound,
  z.ZodTypeDef,
  UserElementsInput
> = z.object({
  userLoraId: z.nullable(z.number()).optional(),
  weight: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserElementsInput$ {
  /** @deprecated use `UserElementsInput$inboundSchema` instead. */
  export const inboundSchema = UserElementsInput$inboundSchema;
  /** @deprecated use `UserElementsInput$outboundSchema` instead. */
  export const outboundSchema = UserElementsInput$outboundSchema;
  /** @deprecated use `UserElementsInput$Outbound` instead. */
  export type Outbound = UserElementsInput$Outbound;
}

export function userElementsInputToJSON(
  userElementsInput: UserElementsInput,
): string {
  return JSON.stringify(
    UserElementsInput$outboundSchema.parse(userElementsInput),
  );
}

export function userElementsInputFromJSON(
  jsonString: string,
): SafeParseResult<UserElementsInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserElementsInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserElementsInput' from JSON`,
  );
}
